package main

import
  _ "hello"
  "world"

type x *[]string

var x = neat.desk(args...)
var n = neat.(type)
var u = x<<8 + y<<16

const
  a = iota
  b
  c
  d

def testGetters()
  owner := obj.Owner()
  if owner != user
    obj.SetOwner(user)

def testIf()
  if err := file.Chmod(0664); err != nil
    log.Print(err)
    return err

  f, err := os.Open(name)
  if err != nil: return err
  codeUsing(f)

def testFor()
  sum := 0
  for i := 0; i < 10; i++: sum += i

def contents(filename string) -> (string, error)
  var result []byte
  buf := make([]byte, 100)
  for
    n, err := f.Read(buf[0:])
    result = append(result, buf[0:n]...) # append is discussed later.
    if err != nil
      if err == io.EOF: break
      return "", err  # f will be closed if we return here.
  return string(result), nil # f will be closed if we return here.

def primaryExpressions()
  a := [5]int{1, 2, 3, 4, 5}
  v, ok = x.(T)
  v, ok := x.(T)
  var v, ok = x.(T)
  math.Atan2(x, y)  # function call
  var pt *Point
  pt.Scale(3.5)  # method call with receiver pt

def *int.hello (a *[]string) -> (a, b int)
  var
    x, y *[]string = a
    z int
  n := 1
  n++
  s := x && y
  q = !z

  a := q[1:]
  b := q[:1]
  c := q[1:2:3]

  switch foo := foo(a...); foo > 0
    case x > 0: nice
    case q
      s := "woot"
    default: true

  for a, b in Some
    print(a)

  for: some

  for a, b := range Some
    some

  for a := 0; a < 10; a++
    some

type X struct {}

type X struct
  x, y int      # Comment
  _ float32
  A *[]int
  *P.T4

type Point3D struct
  x, y, z float64


def Greeting(prefix string, who ...string)

def test()
  Greeting("hello:", "Joe", "Anna", "Eileen")
  s := []string{"James", "Jasmine"}
  Greeting("goodbye:", s...)

type T struct
	a int

def  T.Mv(a int) -> int: return 0  # value receiver
def *T.Mp(f float32) -> float32: return 1 # pointer receiver

def methodExpression()
  var t T
  t.Mv(7)
  T.Mv(t, 7)
  (T).Mv(t, 7)
  f1 := T.Mv
  f1(t, 7)
  f2 := (T).Mv
  f2(t, 7)

def testIf()
  if x > max
    x = max

  if x := f(); x < y
    return x


  else if x > z
    return z

  else
    return y

def testSelectChan()
  var
    c, c1, c2, c3 chan int
  var i1, i2 int

  select
    case i1 = <-c1
      print("received ", i1, " from c1")
    case c2 <- i2
      print("sent ", i2, " to c2")
    case i3, ok := (<-c3)  # same as: i3, ok := <-c3
      if ok
        print("received ", i3, " from c3")
      else
        print("c3 is closed")
    default
      print("no communication")

  for  # send random sequence of bits to c
    select
      case c <- 0  # note: no statement, no fallthrough, no folding of cases
      case c <- 1
    break
    continue
    fallthrough

def testMap()
  type a map[string]int
  var timeZone = map[string]int{
      "UTC":  0*60*60,
      "EST": -5*60*60,
      "CST": -6*60*60,
      "MST": -7*60*60,
      "PST": -8*60*60,
  }

def testGoTo()
  goto nice

  nice:
    print("yes I'm")

def NewFile(fd int, name string) -> *File
    if fd < 0: return nil
    f := File{fd, name, nil, 0}
    return &f

def testMapAllocation()
  a := [...]string    {Enone: "no error", Eio: "Eio", Einval: "invalid argument"}
  s := []string       {Enone: "no error", Eio: "Eio", Einval: "invalid argument"}
  m := map[int]string {Enone: "no error", Eio: "Eio", Einval: "invalid argument"}

def Append(slice, data[]byte) -> []byte
    l := len(slice)
    if l + len(data) > cap(slice) # reallocate
        # Allocate double what's needed, for future growth.
        newSlice := make([]byte, (l+len(data))*2)
        # The copy function is predeclared and works for any slice type.
        copy(newSlice, slice)
        slice = newSlice
    slice = slice[0:l+len(data)]
    for i, c in data: slice[l+i] = c
    return slice

def Print()
  t := &T{ 7, -2.35, "abc\tdef" }
  fmt.Printf("%v\n", t)
  fmt.Printf("%+v\n", t)
  fmt.Printf("%#v\n", t)
  fmt.Printf("%#v\n", timeZone)

def testGo()
  f := do (a, b int) -> (bool)
    nice
  go f()

type Foxy interface
  Read(b Buffer)  -> bool
  Write(b Buffer) -> bool
  Close()

def inliner()
  ls("-al") do (i, o string)
    fmt.Println(i, o)

def testForIn()
  for a, b in Some()
    hereAllowed(in)
  for a, b in Some(): hereToo(in)

def unfinished()
  if a == b &&
     b != c ||
     (a > b && c > g)
    doSome()

def hereDoc()
  a := "something"
  s := """
    This is awesome
    Darkness in the basement
  """
  fmt.Println(s)

def hereRegex()
  s := ///
    (?:
      [a-z] # chars
      [1-2] # digits
      \s?   # maybe space
    )
  ///
  s.MatchString("a1")

def doNotation()
  # Simple
  lines.each() do (line string)
    fmt.Println(line)

  # With ret type
  tokens.on("TERM") do (pos int) -> string
    doSome(c, d)

  # Can be assigned
  x := do
    doSome()

  go x()

  # If you want to pass args in a anonymous fn
  go!(huge) do (a []string)
    doSome(a)

  # Lua call, style.
  stringSize := aString::len()
