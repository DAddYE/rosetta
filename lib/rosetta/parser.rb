#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

###### racc/parser.rb begin
unless $".index 'racc/parser.rb'
$".push 'racc/parser.rb'
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
#
# $Id: 3c520ba1f2996b86abc21eeb54768934a7be9d0c $
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#

require 'racc/info'

unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError # :nodoc:
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError
end

# Racc is a LALR(1) parser generator.
# It is written in Ruby itself, and generates Ruby programs.
#
# == Command-line Reference
#
#     racc [-o<var>filename</var>] [--output-file=<var>filename</var>]
#          [-e<var>rubypath</var>] [--embedded=<var>rubypath</var>]
#          [-v] [--verbose]
#          [-O<var>filename</var>] [--log-file=<var>filename</var>]
#          [-g] [--debug]
#          [-E] [--embedded]
#          [-l] [--no-line-convert]
#          [-c] [--line-convert-all]
#          [-a] [--no-omit-actions]
#          [-C] [--check-only]
#          [-S] [--output-status]
#          [--version] [--copyright] [--help] <var>grammarfile</var>
#
# [+filename+]
#   Racc grammar file. Any extention is permitted.
# [-o+outfile+, --output-file=+outfile+]
#   A filename for output. default is <+filename+>.tab.rb
# [-O+filename+, --log-file=+filename+]
#   Place logging output in file +filename+.
#   Default log file name is <+filename+>.output.
# [-e+rubypath+, --executable=+rubypath+]
#   output executable file(mode 755). where +path+ is the Ruby interpreter.
# [-v, --verbose]
#   verbose mode. create +filename+.output file, like yacc's y.output file.
# [-g, --debug]
#   add debug code to parser class. To display debuggin information,
#   use this '-g' option and set @yydebug true in parser class.
# [-E, --embedded]
#   Output parser which doesn't need runtime files (racc/parser.rb).
# [-C, --check-only]
#   Check syntax of racc grammer file and quit.
# [-S, --output-status]
#   Print messages time to time while compiling.
# [-l, --no-line-convert]
#   turns off line number converting.
# [-c, --line-convert-all]
#   Convert line number of actions, inner, header and footer.
# [-a, --no-omit-actions]
#   Call all actions, even if an action is empty.
# [--version]
#   print Racc version and quit.
# [--copyright]
#   Print copyright and quit.
# [--help]
#   Print usage and quit.
#
# == Generating Parser Using Racc
#
# To compile Racc grammar file, simply type:
#
#   $ racc parse.y
#
# This creates Ruby script file "parse.tab.y". The -o option can change the output filename.
#
# == Writing A Racc Grammar File
#
# If you want your own parser, you have to write a grammar file.
# A grammar file contains the name of your parser class, grammar for the parser,
# user code, and anything else.
# When writing a grammar file, yacc's knowledge is helpful.
# If you have not used yacc before, Racc is not too difficult.
#
# Here's an example Racc grammar file.
#
#   class Calcparser
#   rule
#     target: exp { print val[0] }
#
#     exp: exp '+' exp
#        | exp '*' exp
#        | '(' exp ')'
#        | NUMBER
#   end
#
# Racc grammar files resemble yacc files.
# But (of course), this is Ruby code.
# yacc's $$ is the 'result', $0, $1... is
# an array called 'val', and $-1, $-2... is an array called '_values'.
#
# See the {Grammar File Reference}[rdoc-ref:lib/racc/rdoc/grammar.en.rdoc] for
# more information on grammar files.
#
# == Parser
#
# Then you must prepare the parse entry method. There are two types of
# parse methods in Racc, Racc::Parser#do_parse and Racc::Parser#yyparse
#
# Racc::Parser#do_parse is simple.
#
# It's yyparse() of yacc, and Racc::Parser#next_token is yylex().
# This method must returns an array like [TOKENSYMBOL, ITS_VALUE].
# EOF is [false, false].
# (TOKENSYMBOL is a Ruby symbol (taken from String#intern) by default.
# If you want to change this, see the grammar reference.
#
# Racc::Parser#yyparse is little complicated, but useful.
# It does not use Racc::Parser#next_token, instead it gets tokens from any iterator.
#
# For example, <code>yyparse(obj, :scan)</code> causes
# calling +obj#scan+, and you can return tokens by yielding them from +obj#scan+.
#
# == Debugging
#
# When debugging, "-v" or/and the "-g" option is helpful.
#
# "-v" creates verbose log file (.output).
# "-g" creates a "Verbose Parser".
# Verbose Parser prints the internal status when parsing.
# But it's _not_ automatic.
# You must use -g option and set +@yydebug+ to +true+ in order to get output.
# -g option only creates the verbose parser.
#
# === Racc reported syntax error.
#
# Isn't there too many "end"?
# grammar of racc file is changed in v0.10.
#
# Racc does not use '%' mark, while yacc uses huge number of '%' marks..
#
# === Racc reported "XXXX conflicts".
#
# Try "racc -v xxxx.y".
# It causes producing racc's internal log file, xxxx.output.
#
# === Generated parsers does not work correctly
#
# Try "racc -g xxxx.y".
# This command let racc generate "debugging parser".
# Then set @yydebug=true in your parser.
# It produces a working log of your parser.
#
# == Re-distributing Racc runtime
#
# A parser, which is created by Racc, requires the Racc runtime module;
# racc/parser.rb.
#
# Ruby 1.8.x comes with Racc runtime module,
# you need NOT distribute Racc runtime files.
#
# If you want to include the Racc runtime module with your parser.
# This can be done by using '-E' option:
#
#   $ racc -E -omyparser.rb myparser.y
#
# This command creates myparser.rb which `includes' Racc runtime.
# Only you must do is to distribute your parser file (myparser.rb).
#
# Note: parser.rb is LGPL, but your parser is not.
# Your own parser is completely yours.
module Racc

  unless defined?(Racc_No_Extentions)
    Racc_No_Extentions = false # :nodoc:
  end

  class Parser

    Racc_Runtime_Version = ::Racc::VERSION
    Racc_Runtime_Revision = '$Id: 3c520ba1f2996b86abc21eeb54768934a7be9d0c $'

    Racc_Runtime_Core_Version_R = ::Racc::VERSION
    Racc_Runtime_Core_Revision_R = '$Id: 3c520ba1f2996b86abc21eeb54768934a7be9d0c $'.split[1]
    begin
      require 'racc/cparse'
    # Racc_Runtime_Core_Version_C  = (defined in extention)
      Racc_Runtime_Core_Revision_C = Racc_Runtime_Core_Id_C.split[2]
      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extentions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c # :nodoc:
      Racc_YY_Parse_Method         = :_racc_yyparse_c # :nodoc:
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C # :nodoc:
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_C # :nodoc:
      Racc_Runtime_Type            = 'c' # :nodoc:
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type # :nodoc:
      Racc_Runtime_Type
    end

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    # The entry point of the parser. This method is used with #next_token.
    # If Racc wants to get token (and its value), calls next_token.
    #
    # Example:
    #     def parse
    #       @q = [[1,1],
    #             [2,2],
    #             [3,3],
    #             [false, '$']]
    #       do_parse
    #     end
    #
    #     def next_token
    #       @q.shift
    #     end
    def do_parse
      __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    end

    # The method to fetch next token.
    # If you use #do_parse method, you must implement #next_token.
    #
    # The format of return value is [TOKEN_SYMBOL, VALUE].
    # +token-symbol+ is represented by Ruby's symbol by default, e.g. :IDENT
    # for 'IDENT'.  ";" (String) for ';'.
    #
    # The final symbol (End of file) must be false.
    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars
      tok = act = i = nil

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    # Another entry point for the parser.
    # If you use this method, you must implement RECEIVER#METHOD_ID method.
    #
    # RECEIVER#METHOD_ID is a method to get next token.
    # It must 'yield' the token, which format is [TOKEN-SYMBOL, VALUE].
    def yyparse(recv, mid)
      __send__(Racc_YY_Parse_Method, recv, mid, _racc_setup(), true)
    end

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, _, action_pointer,
      _,            _,            _, _,
      _,            _,            _, shift_n,
      reduce_n,     * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t == 1   # error token
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      _,          _,            _,            _,
      goto_table, goto_check,   goto_default, goto_pointer,
      nt_base,    reduce_table, _,            _,
      _,          use_result,   * = arg

      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    # This method is called when a parse error is found.
    #
    # ERROR_TOKEN_ID is an internal ID of token which caused error.
    # You can get string representation of this ID by calling
    # #token_to_str.
    #
    # ERROR_VALUE is a value of error token.
    #
    # value_stack is a stack of symbol values.
    # DO NOT MODIFY this object.
    #
    # This method raises ParseError by default.
    #
    # If this method returns, parsers enter "error recovering mode".
    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    # Enter error recovering mode.
    # This method does not call #on_error.
    def yyerror
      throw :racc_jump, 1
    end

    # Exit parser.
    # Return value is Symbol_Value_Stack[0].
    def yyaccept
      throw :racc_jump, 2
    end

    # Leave error recovering mode.
    def yyerrok
      @racc_error_status = 0
    end

    # For debugging output
    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    # Convert internal ID of token symbol to the string.
    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end

module Rosetta
class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 647)
  include Ast
  attr_reader :lexer

  def parse(code)
    @yydebug = true
    @lexer   = Lexer.new(code)
    @index   = -1
    @lexer.tokenize! # Tokenize the code using our lexer
    do_parse # Kickoff the parsing process
  end

  def tokens
    @lexer.tokens.to_a
  end

  def next_token
    @token = @lexer.tokens[@index+=1]
    @token
  end

  def on_error(error_token_id, error_value, value_stack)
    raise Rosetta::ParseError.new(@token, token_to_str(error_token_id),
      error_value, @lexer, value_stack)
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'-290,539,-289,294,294,192,3,497,498,-290,8,-289,8,8,8,190,317,259,215',
'216,317,214,8,378,259,476,259,248,447,445,256,317,214,249,-290,-290',
'-289,-289,358,84,334,59,18,85,323,87,324,83,22,191,66,68,86,88,23,334',
'64,60,48,189,258,89,25,63,24,19,17,258,9,258,9,9,9,317,9,50,51,318,9',
'49,9,-290,46,-289,29,317,317,30,329,9,8,31,32,97,35,214,263,323,8,324',
'264,8,247,36,8,214,8,33,34,334,323,58,324,8,16,84,9,59,18,85,214,87',
'296,83,22,65,66,68,86,88,23,9,64,60,48,197,450,89,25,63,24,19,17,9,9',
'97,50,51,9,-178,49,50,51,21,20,49,9,470,46,9,29,8,9,30,9,8,8,31,32,259',
'35,9,8,199,8,8,214,8,50,36,8,-179,8,33,34,380,97,58,438,8,358,84,9,59',
'18,85,465,87,8,83,22,491,66,68,86,88,23,95,64,60,48,294,258,89,25,63',
'24,19,17,9,-172,259,263,9,9,-176,264,50,51,8,9,49,9,9,46,9,29,8,9,30',
'9,109,494,31,32,263,35,9,453,264,448,98,-172,8,50,36,9,-176,259,33,34',
'468,97,58,258,106,16,84,9,59,18,85,437,87,8,83,22,65,66,68,86,88,23',
'95,64,60,48,9,8,89,25,63,24,19,17,9,8,-173,500,543,102,258,436,50,51',
'21,20,49,59,99,46,9,29,-277,534,30,8,410,68,31,32,-174,35,64,60,8,254',
'544,92,-173,63,36,9,50,-282,33,34,214,149,58,545,546,535,-175,9,411',
'9,-277,-277,234,201,187,214,-174,9,214,536,97,251,252,151,166,95,154',
'455,97,150,152,-282,-282,235,504,214,153,9,-175,50,51,58,505,49,214',
'200,9,16,84,214,59,18,85,421,87,509,83,22,65,66,68,86,88,23,418,64,60',
'48,492,97,89,25,63,24,19,17,413,458,382,154,149,496,97,457,50,51,21',
'20,49,153,378,46,373,29,50,51,30,370,49,214,31,32,151,35,362,154,50',
'51,150,152,49,195,36,449,97,153,33,34,50,51,58,336,49,358,84,9,59,18',
'85,312,87,311,83,22,518,66,68,86,88,23,294,64,60,48,513,97,89,25,63',
'24,19,17,50,51,409,97,49,310,-156,-156,50,51,-156,-156,49,59,-156,46',
'294,29,366,97,30,482,97,68,31,32,-177,35,64,60,8,368,97,375,97,63,36',
'481,97,-156,33,34,309,294,58,525,526,527,199,9,-156,262,530,256,234',
'199,187,137,138,139,140,142,143,141,133,134,135,136,127,128,130,131',
'129,132,126,235,66,228,256,214,214,250,223,58,50,50,97,202,9,16,84,214',
'59,18,85,195,87,214,83,22,65,66,68,86,88,23,188,64,60,48,-179,176,89',
'25,63,24,19,17,137,138,139,140,142,143,141,166,50,51,21,20,49,59,547',
'46,548,29,166,550,30,551,552,68,31,32,199,35,64,60,8,554,66,556,164',
'63,36,66,124,558,33,34,97,97,58,10,6,199,66,9,4,565,,,234,,187,137,138',
'139,140,142,143,141,133,134,135,136,127,128,130,131,129,132,,235,,242',
',,,,,58,,,,,9,358,84,214,59,18,85,,87,,83,22,,66,68,86,88,23,,64,60',
'48,,,89,25,63,24,19,17,137,138,139,140,142,143,141,,50,51,,,49,,,46',
',29,,,30,,,,31,32,,35,137,138,139,140,142,143,141,,36,,,,33,34,,,58',
',,16,84,9,59,18,85,,87,,83,22,65,66,68,86,88,23,,64,60,48,,,89,25,63',
'24,19,17,137,138,139,140,142,143,141,,50,51,21,20,49,59,,46,,29,,,30',
',,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,,,9,,,,,234,,187,137',
'138,139,140,142,143,141,133,134,135,136,394,,59,,395,,397,235,393,242',
',66,68,396,398,58,,64,60,8,9,,399,214,63,137,138,139,140,142,143,141',
'133,134,135,136,50,51,,,49,,,46,,29,,,30,,,,31,32,,35,,,,,,,,,36,,,',
'33,34,,,58,,394,,59,9,395,,397,,393,,,66,68,396,398,,,64,60,8,,,399',
',63,137,138,139,140,142,143,141,133,134,135,136,50,51,,,49,59,,46,,29',
',,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49',
'59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50',
'51,9,,49,59,,46,59,29,,,30,,,68,31,32,68,35,64,60,8,64,60,8,,63,36,',
'63,,33,34,,,58,,,,,9,,,,,234,59,187,234,,187,,,,,66,68,,,,,64,60,8,',
',235,,63,235,,,,,58,,,58,,9,50,51,9,,49,59,,46,,29,,,30,,66,68,31,32',
',35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30,,66',
'68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29',
',,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49',
'59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50',
'51,9,,49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34',
',,58,,,50,51,9,,49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36',
',,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8',
',,,,63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30,,66,68,31,32,',
'35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30,,66',
'68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29',
',,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49',
'59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50',
'51,9,,49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34',
',,58,,,50,51,9,,49,59,,46,,169,,,30,,66,68,31,32,,35,64,60,8,,,,,63',
'170,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30,,66,68,31,32,,35,64',
'60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30,,66,68,31',
'32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30',
',,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,179,59,58,,,,,9,,,66,68,184',
',187,59,64,60,8,,,,,63,66,68,,,,,64,60,8,186,,50,51,63,,49,,58,46,,29',
',9,30,,50,51,31,32,49,35,,46,,,,,,,36,59,,,33,34,,,58,,66,68,,9,,59',
'64,60,8,,,,58,63,,68,,9,,,64,60,8,,,50,51,63,,49,,,46,,29,,,30,,,,31',
'32,,35,,234,,187,,,,,36,59,,,33,34,,,58,,66,68,,9,235,59,64,60,8,,,',
'58,63,66,68,,9,,,64,60,8,,,50,51,63,,49,,471,46,,169,,,30,,50,51,31',
'32,49,35,,46,,,,,,59,170,,,,33,34,,,58,68,,,,9,64,60,8,,,,,63,58,,,',
',9,,59,,,,,,,,,66,68,234,,187,308,64,60,8,,,,,63,,68,,,,,64,60,8,235',
',50,51,63,,49,,58,46,,29,,9,30,,,,31,32,,35,,234,,187,,,,,36,59,,,33',
'34,,,58,,66,68,,9,235,59,64,60,8,,,,58,63,66,68,,9,,,64,60,8,,,50,51',
'63,,49,,,46,,,,,,59,50,51,,,49,,,46,66,68,,,,,64,60,8,,208,,,63,58,',
',,,9,,,,,,50,51,,58,49,59,,46,9,29,,,30,,66,68,31,32,,35,64,60,8,,,',
',63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30,,,68,31,32,,35,64',
'60,8,,,,,63,36,,,,33,34,,,58,,,,,9,,59,,,234,,187,,,,66,68,,,,,64,60',
'8,,,,,63,,235,,,,,,342,,58,,50,51,,9,49,59,,46,,29,,,30,,66,68,31,32',
',35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,169,,,30,',
'66,68,31,32,,35,64,60,8,,,,,63,170,,,,33,34,,,58,,,50,51,9,,49,59,,46',
',29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9',
',49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,416,,,33,34,',
',58,,,50,51,9,,49,59,,46,,169,,,30,,66,68,31,32,,35,64,60,8,,388,,,63',
'170,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30,,66,68,31,32,,35,64',
'60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30,,66,68,31',
'32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30',
',66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49,,,46',
',29,,,30,,,,31,32,,35,,,,,,,,,36,,,,33,34,59,,58,,,166,,9,,66,68,,,',
',64,60,8,,,,,63,137,138,139,140,142,143,141,133,134,135,136,50,51,,',
'49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58',
',,50,51,9,,49,59,,46,59,29,,,30,,,68,31,32,68,35,64,60,8,64,60,8,,63',
'36,,63,,33,34,,,58,,,166,,9,,59,,,234,59,187,234,,187,,68,,,,68,64,60',
'8,,64,60,8,63,,235,,63,235,,,,,58,342,,58,,9,,,9,234,59,187,,234,,187',
',,,66,68,,,,,64,60,8,,,235,,63,,235,,,,58,,342,,58,9,50,51,,9,49,59',
',46,,29,,,30,,,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,,,9,,59',
',,234,,187,,,,66,68,,,,,64,60,8,,388,,,63,,235,,,,,,342,,58,,50,51,',
'9,49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58',
',,50,51,9,,49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,',
'33,34,,,58,,,50,51,9,,49,59,,46,59,169,,,30,,,68,31,32,68,35,64,60,8',
'64,60,8,,63,170,,63,,33,34,,,58,,,,,9,,,,,234,59,187,234,,187,,,,,66',
'68,,,,,64,60,8,,,235,,63,235,,,342,,58,,,58,,9,50,51,9,,49,59,,46,,29',
',,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49',
'59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50',
'51,9,,49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34',
',,58,,,50,51,9,,49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36',
',,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8',
',,,,63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30,,66,68,31,32,',
'35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30,,66',
'68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29',
',,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49',
'59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50',
'51,9,,49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34',
',,58,,,50,51,9,,49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36',
',,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8',
',,,,63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30,,66,68,31,32,',
'35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30,,66',
'68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49,59,,46,,29',
',,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9,,49',
'59,,46,,29,,,30,,,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,59,58,,,',
',9,,,66,68,234,,187,,64,60,8,,,,,63,,,,,,,,,,235,,50,51,,,49,59,58,46',
',29,,9,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58,,,50,51,9',
',49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58',
',,50,51,9,,49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,',
'33,34,,,58,,,50,51,9,,49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,',
',,63,36,,,,33,34,,,58,,,50,51,9,,49,59,289,46,59,169,,,30,,,68,31,32',
'68,35,64,60,8,64,60,8,,63,170,,63,,33,34,,,58,,,,,9,,,,,234,59,187,354',
',187,,,,,66,68,,,,,64,60,8,,,235,,63,235,,,342,,58,,,58,,9,50,51,9,',
'49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,,33,34,,,58',
',,50,51,9,,49,59,,46,,29,,,30,,66,68,31,32,,35,64,60,8,,,,,63,36,,,',
'33,34,303,,58,,,50,51,9,,49,59,,46,,29,,,30,,,68,31,32,,35,64,60,8,',
',,,63,36,,,,33,34,,59,58,,,166,,9,,,66,68,234,,187,,64,60,8,,,,,63,',
',,,,,,,,235,,50,51,,,49,308,58,46,,169,,9,30,,66,68,31,32,,35,64,60',
'8,,,,,63,170,,,,33,34,,,58,,,50,51,9,,49,59,,46,59,29,,,30,,,68,31,32',
'68,35,64,60,8,64,60,8,,63,36,,63,,33,34,,,58,,,,,9,,59,,,234,,187,234',
',187,,68,,,,,64,60,8,,,,,63,,235,,,235,,,342,,58,,,58,,9,59,,9,234,',
'187,,,,66,68,59,,,,64,60,8,,,,68,63,,235,,64,60,8,,,,58,63,50,51,,9',
'49,,502,46,,169,,,30,,,,31,32,429,35,187,,,,,,,,170,,,,33,34,59,,58',
',,430,,9,,66,68,,,58,,64,60,8,9,,,,63,137,138,139,140,142,143,141,133',
'134,135,136,50,51,,,49,,,46,,29,,,30,,,,31,32,,35,,,,,,,,,36,,,,33,34',
'59,,58,,,166,,9,,66,68,59,,,,64,60,8,,,,68,63,,,,64,60,8,,,,,63,50,51',
',,49,,,46,,29,,,30,,,,31,32,234,35,187,,,,,,,,36,,,,33,34,59,,58,,,235',
',9,,66,68,,,58,,64,60,8,9,,,,63,137,138,139,140,142,143,141,133,134',
'135,136,50,51,,,49,,,46,,29,,,30,,,,31,32,,35,,,,,,,,,36,,,,33,34,-309',
'145,58,,,,,9,,,,137,138,139,140,142,143,141,133,134,135,136,127,128',
'130,131,129,132,126,125,144,,-309,-309,,,,,,,,,,,,,-309,,146,147,137',
'138,139,140,142,143,141,133,134,135,136,127,128,130,131,129,132,126',
'125,144,,,,,,,,,,420,137,138,139,140,142,143,141,133,134,135,136,127',
'128,130,131,129,132,126,125,144,,,,,,,419,,417,137,138,139,140,142,143',
'141,133,134,135,136,127,128,130,131,129,132,126,125,144,137,138,139',
'140,142,143,141,133,134,135,136,127,128,130,131,129,132,126,125,144',
'137,138,139,140,142,143,141,133,134,135,136,127,128,130,131,129,132',
'126,125,144,137,138,139,140,142,143,141,133,134,135,136,127,128,130',
'131,129,132,126,125,144,137,138,139,140,142,143,141,133,134,135,136',
'127,128,130,131,129,132,126,125,144,137,138,139,140,142,143,141,133',
'134,135,136,127,128,130,131,129,132,126,125,144,137,138,139,140,142',
'143,141,133,134,135,136,127,128,130,131,129,132,126,125,144,137,138',
'139,140,142,143,141,133,134,135,136,127,128,130,131,129,132,126,125',
'144,137,138,139,140,142,143,141,133,134,135,136,127,128,130,131,129',
'132,126,125,144,137,138,139,140,142,143,141,133,134,135,136,127,128',
'130,131,129,132,126,125,144,137,138,139,140,142,143,141,133,134,135',
'136,127,128,130,131,129,132,126,125,144,137,138,139,140,142,143,141',
'133,134,135,136,127,128,130,131,129,132,126,125' ]
        racc_action_table = arr = ::Array.new(4787, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'488,494,487,323,324,64,0,406,406,488,102,487,441,448,196,63,192,494',
'90,90,189,406,249,377,557,372,121,112,324,323,391,191,90,112,488,488',
'487,487,200,200,192,200,200,200,189,200,189,200,200,64,200,200,200,200',
'200,191,200,200,200,63,494,200,200,200,200,200,200,557,102,121,441,448',
'196,190,192,200,200,189,189,200,249,488,200,487,200,451,439,200,191',
'191,111,200,200,330,200,371,408,190,151,190,408,109,111,200,106,364',
'398,200,200,451,439,200,439,88,250,250,200,250,250,250,363,250,151,250',
'250,250,250,250,250,250,250,190,250,250,250,66,330,250,250,250,250,250',
'250,451,439,319,440,440,111,175,440,250,250,250,250,250,151,360,250',
'109,250,92,106,250,398,85,381,250,250,117,250,88,395,66,369,394,347',
'248,92,250,376,175,21,250,250,243,243,250,319,20,469,469,250,469,469',
'469,343,469,236,469,469,400,469,469,469,469,469,92,469,469,469,334,117',
'469,469,469,469,469,469,92,425,194,262,85,381,548,262,469,469,19,395',
'469,369,394,469,248,469,367,376,469,21,19,404,469,469,124,469,20,332',
'124,325,9,425,18,367,469,236,548,265,469,469,355,355,469,194,18,5,5',
'469,5,5,5,316,5,3,5,5,5,5,5,5,5,5,367,5,5,5,19,17,5,5,5,5,5,5,367,84',
'426,411,503,17,265,313,5,5,5,5,5,321,9,5,18,5,207,472,5,6,290,321,5',
'5,427,5,321,321,321,114,503,6,426,321,5,3,6,209,5,5,503,206,5,506,506',
'472,428,5,290,17,207,207,321,67,321,472,427,84,290,480,480,114,114,206',
'309,6,206,335,335,206,206,209,209,321,414,114,206,6,428,518,518,321',
'415,518,306,67,321,247,247,321,247,247,247,302,247,422,247,247,247,247',
'247,247,247,247,298,247,247,247,402,402,247,247,247,247,247,247,292',
'339,246,339,28,405,405,339,247,247,247,247,247,339,241,247,235,247,322',
'322,247,227,322,213,247,247,28,247,208,28,446,446,28,28,446,195,247',
'328,328,28,247,247,550,550,247,193,550,259,259,247,259,259,259,179,259',
'178,259,259,444,259,259,259,259,259,445,259,259,259,433,433,259,259',
'259,259,259,259,551,551,267,267,551,176,317,317,259,259,317,317,259',
'103,317,259,447,259,219,219,259,386,386,103,259,259,174,259,103,103',
'103,225,225,237,237,103,259,383,383,317,259,259,171,150,259,454,456',
'457,465,259,317,123,467,120,103,470,103,268,268,268,268,268,268,268',
'268,268,268,268,268,268,268,268,268,268,268,103,471,103,115,475,478',
'113,99,103,95,94,91,68,103,100,100,103,100,100,100,65,100,379,100,100',
'100,100,100,100,100,100,60,100,100,100,57,48,100,100,100,100,100,100',
'276,276,276,276,276,276,276,45,100,100,100,100,100,238,509,100,512,100',
'44,519,100,521,524,238,100,100,526,100,238,238,238,527,534,535,43,238',
'100,37,25,544,100,100,11,7,100,4,2,552,556,100,1,559,,,238,,238,269',
'269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,,238',
',238,,,,,,238,,,,,238,310,310,238,310,310,310,,310,,310,310,,310,310',
'310,310,310,,310,310,310,,,310,310,310,310,310,310,277,277,277,277,277',
'277,277,,310,310,,,310,,,310,,310,,,310,,,,310,310,,310,278,278,278',
'278,278,278,278,,310,,,,310,310,,,310,,,382,382,310,382,382,382,,382',
',382,382,382,382,382,382,382,382,,382,382,382,,,382,382,382,382,382',
'382,279,279,279,279,279,279,279,,382,382,382,382,382,107,,382,,382,',
',382,,,107,382,382,,382,107,107,107,,,,,107,382,,,,382,382,,,382,,,',
',382,,,,,107,,107,272,272,272,272,272,272,272,272,272,272,272,491,,491',
',491,,491,107,491,107,,491,491,491,491,107,,491,491,491,107,,491,107',
'491,271,271,271,271,271,271,271,271,271,271,271,491,491,,,491,,,491',
',491,,,491,,,,491,491,,491,,,,,,,,,491,,,,491,491,,,491,,258,,258,491',
'258,,258,,258,,,258,258,258,258,,,258,258,258,,,258,,258,273,273,273',
'273,273,273,273,273,273,273,273,258,258,,,258,136,,258,,258,,,258,,136',
'136,258,258,,258,136,136,136,,,,,136,258,,,,258,258,,,258,,,136,136',
'258,,136,228,,136,,136,,,136,,228,228,136,136,,136,228,228,228,,,,,228',
'136,,,,136,136,,,136,,,228,228,136,,228,429,,228,373,228,,,228,,,429',
'228,228,373,228,429,429,429,373,373,373,,429,228,,373,,228,228,,,228',
',,,,228,,,,,429,29,429,373,,373,,,,,29,29,,,,,29,29,29,,,429,,29,373',
',,,,429,,,373,,429,29,29,373,,29,30,,29,,29,,,29,,30,30,29,29,,29,30',
'30,30,,,,,30,29,,,,29,29,,,29,,,30,30,29,,30,31,,30,,30,,,30,,31,31',
'30,30,,30,31,31,31,,,,,31,30,,,,30,30,,,30,,,31,31,30,,31,32,,31,,31',
',,31,,32,32,31,31,,31,32,32,32,,,,,32,31,,,,31,31,,,31,,,32,32,31,,32',
'33,,32,,32,,,32,,33,33,32,32,,32,33,33,33,,,,,33,32,,,,32,32,,,32,,',
'33,33,32,,33,34,,33,,33,,,33,,34,34,33,33,,33,34,34,34,,,,,34,33,,,',
'33,33,,,33,,,34,34,33,,34,35,,34,,34,,,34,,35,35,34,34,,34,35,35,35',
',,,,35,34,,,,34,34,,,34,,,35,35,34,,35,36,,35,,35,,,35,,36,36,35,35',
',35,36,36,36,,,,,36,35,,,,35,35,,,35,,,36,36,35,,36,23,,36,,36,,,36',
',23,23,36,36,,36,23,23,23,,,,,23,36,,,,36,36,,,36,,,23,23,36,,23,539',
',23,,23,,,23,,539,539,23,23,,23,539,539,539,,,,,539,23,,,,23,23,,,23',
',,539,539,23,,539,370,,539,,539,,,539,,370,370,539,539,,539,370,370',
'370,,,,,370,539,,,,539,539,,,539,,,370,370,539,,370,22,,370,,370,,,370',
',22,22,370,370,,370,22,22,22,,,,,22,370,,,,370,370,,,370,,,22,22,370',
',22,46,,22,,22,,,22,,46,46,22,22,,22,46,46,46,,,,,46,22,,,,22,22,,,22',
',,46,46,22,,46,217,,46,,46,,,46,,217,217,46,46,,46,217,217,217,,,,,217',
'46,,,,46,46,,,46,,,217,217,46,,217,216,,217,,217,,,217,,216,216,217',
'217,,217,216,216,216,,,,,216,217,,,,217,217,,,217,,,216,216,217,,216',
'58,,216,,216,,,216,,58,58,216,216,,216,58,58,58,,,,,58,216,,,,216,216',
',,216,,,58,58,216,,58,59,,58,,58,,,58,,,59,58,58,,58,59,59,59,,,,,59',
'58,,,,58,58,58,498,58,,,,,58,,,498,498,59,,59,396,498,498,498,,,,,498',
'396,396,,,,,396,396,396,59,,498,498,396,,498,,59,498,,498,,59,498,,396',
'396,498,498,396,498,,396,,,,,,,498,497,,,498,498,,,498,,497,497,,498',
',187,497,497,497,,,,396,497,,187,,396,,,187,187,187,,,497,497,187,,497',
',,497,,497,,,497,,,,497,497,,497,,187,,187,,,,,497,362,,,497,497,,,497',
',362,362,,497,187,397,362,362,362,,,,187,362,397,397,,187,,,397,397',
'397,,,362,362,397,,362,,362,362,,362,,,362,,397,397,362,362,397,362',
',397,,,,,,234,362,,,,362,362,,,362,234,,,,362,234,234,234,,,,,234,397',
',,,,397,,215,,,,,,,,,215,215,234,,234,430,215,215,215,,,,,215,,430,',
',,,430,430,430,234,,215,215,430,,215,,234,215,,215,,234,215,,,,215,215',
',215,,430,,430,,,,,215,86,,,215,215,,,215,,86,86,,215,430,87,86,86,86',
',,,430,86,87,87,,430,,,87,87,87,,,86,86,87,,86,,,86,,,,,,260,87,87,',
',87,,,87,260,260,,,,,260,260,260,,86,,,260,86,,,,,86,,,,,,260,260,,87',
'260,89,,260,87,260,,,260,,89,89,260,260,,260,89,89,89,,,,,89,260,,,',
'260,260,,,260,,,89,89,260,,89,354,,89,,89,,,89,,,354,89,89,,89,354,354',
'354,,,,,354,89,,,,89,89,,,89,,,,,89,,255,,,354,,354,,,,255,255,,,,,255',
'255,255,,,,,255,,354,,,,,,354,,354,,255,255,,354,255,263,,255,,255,',
',255,,263,263,255,255,,255,263,263,263,,,,,263,255,,,,255,255,,,255',
',,263,263,255,,263,254,,263,,263,,,263,,254,254,263,263,,263,254,254',
'254,,,,,254,263,,,,263,263,,,263,,,254,254,263,,254,484,,254,,254,,',
'254,,484,484,254,254,,254,484,484,484,,,,,484,254,,,,254,254,,,254,',
',484,484,254,,484,296,,484,,484,,,484,,296,296,484,484,,484,296,296',
'296,,,,,296,484,296,,,484,484,,,484,,,296,296,484,,296,252,,296,,296',
',,296,,252,252,296,296,,296,252,252,252,,252,,,252,296,,,,296,296,,',
'296,,,252,252,296,,252,399,,252,,252,,,252,,399,399,252,252,,252,399',
'399,399,,,,,399,252,,,,252,252,,,252,,,399,399,252,,399,546,,399,,399',
',,399,,546,546,399,399,,399,546,546,546,,,,,546,399,,,,399,399,,,399',
',,546,546,399,,546,423,,546,,546,,,546,,423,423,546,546,,546,423,423',
'423,,,,,423,546,,,,546,546,,,546,,,423,423,546,,423,,,423,,423,,,423',
',,,423,423,,423,,,,,,,,,423,,,,423,423,242,,423,,,423,,423,,242,242',
',,,,242,242,242,,,,,242,270,270,270,270,270,270,270,270,270,270,270',
'242,242,,,242,420,,242,,242,,,242,,420,420,242,242,,242,420,420,420',
',,,,420,242,,,,242,242,,,242,,,420,420,242,,420,110,,420,202,420,,,420',
',,110,420,420,202,420,110,110,110,202,202,202,,110,420,,202,,420,420',
',,420,,,420,,420,,342,,,110,341,110,202,,202,,342,,,,341,342,342,342',
',341,341,341,342,,110,,341,202,,,,,110,202,,202,,110,,,202,342,388,342',
',341,,341,,,,388,388,,,,,388,388,388,,,342,,388,,341,,,,342,,341,,341',
'342,388,388,,341,388,336,,388,,388,,,388,,,336,388,388,,388,336,336',
'336,,,,,336,388,,,,388,388,,,388,,,,,388,,251,,,336,,336,,,,251,251',
',,,,251,251,251,,251,,,251,,336,,,,,,336,,336,,251,251,,336,251,378',
',251,,251,,,251,,378,378,251,251,,251,378,378,378,,,,,378,251,,,,251',
'251,,,251,,,378,378,251,,378,412,,378,,378,,,378,,412,412,378,378,,378',
'412,412,412,,,,,412,378,,,,378,378,,,378,,,412,412,378,,412,466,,412',
'312,412,,,412,,,466,412,412,312,412,466,466,466,312,312,312,,466,412',
',312,,412,412,,,412,,,,,412,,,,,466,125,466,312,,312,,,,,125,125,,,',
',125,125,125,,,466,,125,312,,,466,,466,,,312,,466,125,125,312,,125,126',
',125,,125,,,125,,126,126,125,125,,125,126,126,126,,,,,126,125,,,,125',
'125,,,125,,,126,126,125,,126,127,,126,,126,,,126,,127,127,126,126,,126',
'127,127,127,,,,,127,126,,,,126,126,,,126,,,127,127,126,,127,128,,127',
',127,,,127,,128,128,127,127,,127,128,128,128,,,,,128,127,,,,127,127',
',,127,,,128,128,127,,128,129,,128,,128,,,128,,129,129,128,128,,128,129',
'129,129,,,,,129,128,,,,128,128,,,128,,,129,129,128,,129,130,,129,,129',
',,129,,130,130,129,129,,129,130,130,130,,,,,130,129,,,,129,129,,,129',
',,130,130,129,,130,131,,130,,130,,,130,,131,131,130,130,,130,131,131',
'131,,,,,131,130,,,,130,130,,,130,,,131,131,130,,131,132,,131,,131,,',
'131,,132,132,131,131,,131,132,132,132,,,,,132,131,,,,131,131,,,131,',
',132,132,131,,132,133,,132,,132,,,132,,133,133,132,132,,132,133,133',
'133,,,,,133,132,,,,132,132,,,132,,,133,133,132,,133,134,,133,,133,,',
'133,,134,134,133,133,,133,134,134,134,,,,,134,133,,,,133,133,,,133,',
',134,134,133,,134,135,,134,,134,,,134,,135,135,134,134,,134,135,135',
'135,,,,,135,134,,,,134,134,,,134,,,135,135,134,,135,24,,135,,135,,,135',
',24,24,135,135,,135,24,24,24,,,,,24,135,,,,135,135,,,135,,,24,24,135',
',24,137,,24,,24,,,24,,137,137,24,24,,24,137,137,137,,,,,137,24,,,,24',
'24,,,24,,,137,137,24,,137,138,,137,,137,,,137,,138,138,137,137,,137',
'138,138,138,,,,,138,137,,,,137,137,,,137,,,138,138,137,,138,139,,138',
',138,,,138,,139,139,138,138,,138,139,139,139,,,,,139,138,,,,138,138',
',,138,,,139,139,138,,139,140,,139,,139,,,139,,140,140,139,139,,139,140',
'140,140,,,,,140,139,,,,139,139,,,139,,,140,140,139,,140,186,,140,,140',
',,140,,,186,140,140,,140,186,186,186,,,,,186,140,,,,140,140,,142,140',
',,,,140,,,142,142,186,,186,,142,142,142,,,,,142,,,,,,,,,,186,,142,142',
',,142,143,186,142,,142,,186,142,,143,143,142,142,,142,143,143,143,,',
',,143,142,,,,142,142,,,142,,,143,143,142,,143,144,,143,,143,,,143,,144',
'144,143,143,,143,144,144,144,,,,,144,143,,,,143,143,,,143,,,144,144',
'143,,144,145,,144,,144,,,144,,145,145,144,144,,144,145,145,145,,,,,145',
'144,,,,144,144,,,144,,,145,145,144,,145,149,,145,,145,,,145,,149,149',
'145,145,,145,149,149,149,,,,,149,145,,,,145,145,,,145,,,149,149,145',
',149,453,149,149,199,149,,,149,,,453,149,149,199,149,453,453,453,199',
'199,199,,453,149,,199,,149,149,,,149,,,,,149,,,,,453,152,453,199,,199',
',,,,152,152,,,,,152,152,152,,,453,,152,199,,,453,,453,,,199,,453,152',
'152,199,,152,164,,152,,152,,,152,,164,164,152,152,,152,164,164,164,',
',,,164,152,,,,152,152,,,152,,,164,164,152,,164,166,,164,,164,,,164,',
'166,166,164,164,,164,166,166,166,,,,,166,164,,,,164,164,166,,164,,,166',
'166,164,,166,311,,166,,166,,,166,,,311,166,166,,166,311,311,311,,,,',
'311,166,,,,166,166,,169,166,,,166,,166,,,169,169,311,,311,,169,169,169',
',,,,169,,,,,,,,,,311,,169,169,,,169,170,311,169,,169,,311,169,,170,170',
'169,169,,169,170,170,170,,,,,170,169,,,,169,169,,,169,,,170,170,169',
',170,197,,170,437,170,,,170,,,197,170,170,437,170,197,197,197,437,437',
'437,,197,170,,437,,170,170,,,170,,,,,170,,188,,,197,,197,437,,437,,188',
',,,,188,188,188,,,,,188,,197,,,437,,,197,,197,,,437,,197,413,,437,188',
',188,,,,413,413,308,,,,413,413,413,,,,308,413,,188,,308,308,308,,,,188',
'308,413,413,,188,413,,413,413,,413,,,413,,,,413,413,308,413,308,,,,',
',,,413,,,,413,413,303,,413,,,308,,413,,303,303,,,308,,303,303,303,308',
',,,303,275,275,275,275,275,275,275,275,275,275,275,303,303,,,303,,,303',
',303,,,303,,,,303,303,,303,,,,,,,,,303,,,,303,303,418,,303,,,303,,303',
',418,418,184,,,,418,418,418,,,,184,418,,,,184,184,184,,,,,184,418,418',
',,418,,,418,,418,,,418,,,,418,418,184,418,184,,,,,,,,418,,,,418,418',
'141,,418,,,184,,418,,141,141,,,184,,141,141,141,184,,,,141,274,274,274',
'274,274,274,274,274,274,274,274,141,141,,,141,,,141,,141,,,141,,,,141',
'141,,141,,,,,,,,,141,,,,141,141,27,27,141,,,,,141,,,,27,27,27,27,27',
'27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,,27,27,,,,,,,,,,,,,27,',
'27,27,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,,,,,,,,,,300,297,297,297,297,297,297,297,297,297,297',
'297,297,297,297,297,297,297,297,297,297,,,,,,,299,,297,299,299,299,299',
'299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,390',
'390,390,390,390,390,390,390,390,390,390,390,390,390,390,390,390,390',
'390,390,365,365,365,365,365,365,365,365,365,365,365,365,365,365,365',
'365,365,365,365,365,288,288,288,288,288,288,288,288,288,288,288,288',
'288,288,288,288,288,288,288,288,483,483,483,483,483,483,483,483,483',
'483,483,483,483,483,483,483,483,483,483,483,168,168,168,168,168,168',
'168,168,168,168,168,168,168,168,168,168,168,168,168,168,541,541,541',
'541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541',
'177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177',
'177,177,177,211,211,211,211,211,211,211,211,211,211,211,211,211,211',
'211,211,211,211,211,211,542,542,542,542,542,542,542,542,542,542,542',
'542,542,542,542,542,542,542,542,542,507,507,507,507,507,507,507,507',
'507,507,507,507,507,507,507,507,507,507,507,507,287,287,287,287,287',
'287,287,287,287,287,287,287,287,287,287,287,287,287,287' ]
        racc_action_check = arr = ::Array.new(4787, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   -16,   657,   635,   253,   652,   265,   295,   615,   nil,   230,
   nil,   614,   nil,   nil,   nil,   nil,   nil,   267,   232,   208,
   168,   161,  1529,  1412,  3400,   612,   nil,  4403,   372,  1100,
  1139,  1178,  1217,  1256,  1295,  1334,  1373,   631,   nil,   nil,
   nil,   nil,   nil,   596,   548,   537,  1568,   nil,   524,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   522,  1685,  1724,
   521,   nil,   nil,   -18,   -28,   537,    90,   349,   531,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   275,   144,  2034,  2048,    92,  2120,
   -50,   540,   140,   nil,   536,   535,   nil,   nil,   nil,   550,
   577,   nil,   -11,   498,   nil,   nil,    83,   810,   nil,    80,
  2655,    69,   -40,   537,   290,   486,   nil,   136,   nil,   nil,
   461,    -7,   nil,   507,   242,  2971,  3010,  3049,  3088,  3127,
  3166,  3205,  3244,  3283,  3322,  3361,   980,  3439,  3478,  3517,
  3556,  4367,  3625,  3664,  3703,  3742,   nil,   nil,   nil,  3781,
   511,    77,  3862,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  3901,   nil,  3940,   nil,  4601,  4009,
  4048,   487,   nil,   nil,   470,   104,   461,  4641,   393,   391,
   nil,   nil,   nil,   nil,  4310,   nil,  3595,  1831,  4125,    -1,
    52,    10,    -5,   413,   188,   401,    -7,  4087,   nil,  3823,
    37,   nil,  2658,   nil,   nil,   nil,   293,   313,   396,   334,
   nil,  4661,   nil,   354,   nil,  1971,  1646,  1607,   nil,   473,
   nil,   nil,   nil,   nil,   nil,   486,   nil,   366,  1019,   nil,
   nil,   nil,   nil,   nil,  1941,   425,   177,   488,   616,   nil,
   nil,   359,  2577,   151,   nil,   nil,   382,   383,   156,     1,
   113,  2812,  2392,   nil,  2275,  2197,   nil,   nil,   941,   459,
  2081,   nil,   219,  2236,   nil,   225,   nil,   457,   499,   617,
  2557,   847,   811,   921,  4347,  4211,   560,   678,   706,   754,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  4721,  4561,   nil,
   273,   nil,   368,   nil,   nil,   nil,  2353,  4472,   325,  4501,
  4442,   nil,   312,  4231,   nil,   nil,   299,   nil,  4174,   284,
   695,  3979,  2932,   258,   nil,   nil,   197,   461,   nil,   110,
   nil,   304,   393,   -18,   -17,   183,   nil,   nil,   416,   nil,
    58,   nil,   203,   nil,   190,   330,  2774,   nil,   nil,   346,
   nil,  2697,  2693,   152,   nil,   nil,   nil,    94,   nil,   nil,
   nil,   nil,   nil,   nil,  2159,   227,   nil,   nil,   nil,   nil,
   113,   nil,  1880,    38,    23,  4541,   nil,   216,   nil,   153,
  1490,    13,   -19,  1061,   nil,   nil,   159,   -45,  2851,   504,
   nil,   145,   771,   492,   nil,   nil,   476,   nil,  2735,   nil,
  4521,   -51,   nil,   nil,   154,   151,  1768,  1894,    85,  2431,
   120,   nil,   371,   nil,   233,   384,   -61,   nil,    93,   nil,
   nil,   254,  2890,  4163,   327,   335,   nil,   nil,  4299,   nil,
  2616,   nil,   358,  2509,   nil,   175,   252,   276,   298,  1058,
  1985,   nil,   nil,   447,   nil,   nil,   nil,  4090,   nil,    65,
   108,    -9,   nil,   nil,   427,   456,   405,   484,    -8,   nil,
   nil,    64,   nil,  3820,   490,   nil,   491,   461,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   454,  2929,   497,   nil,   189,
   461,   552,   270,   nil,   nil,   486,   nil,   nil,   487,   nil,
   322,   nil,   nil,  4581,  2314,   nil,   nil,     2,     0,   nil,
   nil,   867,   nil,   nil,   -16,   nil,   nil,  1817,  1754,   nil,
   nil,   nil,   nil,   255,   nil,   nil,   265,  4701,   nil,   543,
   nil,   nil,   579,   nil,   nil,   nil,   nil,   nil,   338,   582,
   nil,   584,   nil,   nil,   585,   nil,   550,   570,   nil,   nil,
   nil,   nil,   nil,   nil,   626,   596,   nil,   nil,   nil,  1451,
   nil,  4621,  4681,   nil,   602,   nil,  2470,   nil,   180,   nil,
   417,   451,   571,   nil,   nil,   nil,   642,    -9,   nil,   583,
   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -2,  -323,    -4,  -323,  -323,   -12,  -323,  -323,  -138,  -323,
   566,    -1,   -13,   -14,   -15,   -16,   -17,  -323,  -323,  -323,
  -323,  -323,  -319,  -323,   -65,  -323,   -69,  -293,   -90,  -323,
  -323,  -323,  -323,  -323,  -323,  -323,  -323,   -99,  -100,  -101,
  -111,  -112,  -119,  -323,  -323,  -131,  -323,  -124,  -138,  -141,
  -142,  -143,  -144,  -145,  -146,  -155,  -177,  -178,  -315,  -323,
  -323,  -193,  -194,  -323,  -323,  -211,  -214,  -323,  -323,  -223,
  -260,  -261,  -262,  -263,  -264,  -265,  -266,  -267,  -268,  -269,
  -270,  -271,  -272,  -274,  -136,  -136,  -323,  -323,  -323,  -317,
  -323,  -323,  -323,    -7,  -323,  -323,    -3,  -159,  -139,  -323,
   -12,   -18,  -323,  -323,  -307,   -20,  -323,  -323,   -22,  -323,
  -323,   -24,  -185,   -28,  -323,   -53,   -54,  -323,   -56,  -320,
   -57,  -323,   -66,  -323,  -323,  -323,  -323,  -323,  -323,  -323,
  -323,  -323,  -323,  -323,  -323,  -323,  -323,  -323,  -323,  -323,
  -323,  -323,  -323,  -323,  -323,  -323,  -297,  -298,  -102,  -323,
  -323,  -323,  -315,  -147,  -148,   -91,   -92,   -93,   -94,   -95,
   -96,   -97,   -98,  -110,  -323,  -121,  -221,  -122,  -133,  -323,
  -323,  -323,  -134,  -168,  -169,  -170,  -323,  -316,  -323,  -323,
  -172,  -173,  -174,  -175,  -323,  -190,  -323,  -323,  -323,  -323,
  -323,  -323,  -323,  -323,  -205,  -211,  -323,  -254,  -207,  -323,
  -256,  -209,  -254,  -137,  -275,  -276,  -323,  -119,  -323,  -119,
  -283,  -309,  -284,  -318,  -158,  -323,  -323,  -323,    -5,  -323,
   -10,    -8,    -9,  -140,  -224,  -323,  -225,   -30,  -323,  -162,
  -163,  -164,  -165,  -166,  -323,  -323,  -323,  -323,   -37,   -35,
  -227,  -323,  -323,  -323,  -229,   -38,   -25,   -12,  -323,  -323,
   -12,  -323,  -323,   -49,  -323,  -319,  -157,   -55,  -323,  -256,
  -319,   -61,  -323,  -323,   -42,   -43,   -45,  -323,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -85,   -86,   -87,   -88,   -89,  -294,  -103,
  -323,  -311,  -323,  -109,  -156,  -113,  -323,  -316,  -323,  -323,
  -127,  -128,  -323,  -221,  -217,  -218,  -313,  -171,  -323,  -132,
  -256,  -323,  -323,  -323,  -191,  -195,  -323,  -138,  -197,  -323,
  -231,  -323,  -321,  -323,  -323,  -241,  -243,  -305,  -323,  -200,
  -323,  -233,  -323,  -245,  -323,  -323,  -254,  -204,  -212,  -153,
  -135,  -155,  -160,  -323,  -248,  -251,  -252,  -255,  -180,  -181,
  -182,  -183,  -184,  -215,  -254,  -323,  -257,  -258,  -259,  -303,
  -323,  -278,  -323,  -295,  -296,  -310,    -6,  -323,   -19,  -323,
  -323,   -32,  -323,  -323,  -308,   -21,  -323,   -36,  -323,   -34,
   -23,  -323,   -12,  -323,  -186,  -187,  -323,   -47,  -323,   -48,
   -51,  -323,  -285,  -286,  -136,  -136,  -323,  -323,  -323,  -317,
  -299,  -301,  -323,   -58,   -63,  -323,   -39,   -44,  -323,   -68,
  -104,  -323,  -323,  -323,  -323,  -323,  -125,  -116,  -315,  -120,
  -323,  -129,  -323,  -314,  -222,  -163,  -164,  -165,  -166,  -323,
  -323,  -196,  -123,  -323,  -188,  -189,  -176,  -323,  -198,  -323,
  -321,  -323,  -236,  -322,  -323,  -323,  -321,  -323,  -323,  -199,
  -201,  -323,  -244,  -254,  -323,  -202,  -323,  -323,  -151,  -152,
  -154,  -213,  -249,  -250,  -161,  -214,  -323,  -323,  -208,  -256,
  -214,  -323,  -323,   -11,  -226,   -31,  -167,  -228,   -33,  -230,
  -323,   -26,   -29,   -50,  -319,  -287,  -288,  -119,  -119,  -291,
  -292,  -323,  -300,   -59,  -323,   -62,   -67,  -323,  -323,   -46,
  -105,  -312,  -106,  -323,  -114,  -115,  -323,  -127,  -126,  -323,
  -219,  -220,  -323,  -273,  -192,  -232,  -235,  -306,  -321,  -323,
  -238,  -323,  -242,  -234,  -323,  -246,  -214,  -149,  -206,  -253,
  -216,  -304,  -210,  -279,  -323,  -323,   -27,   -52,  -302,  -323,
   -64,   -40,   -41,  -107,  -323,  -117,  -315,  -130,  -167,  -237,
  -321,  -321,  -214,  -203,  -150,  -280,  -323,  -323,  -108,  -323,
  -239,  -240,  -247,  -281,   -60,  -118 ]

racc_goto_table = [
   163,   119,   120,   120,   121,   122,   168,   198,    11,   115,
   171,   212,   356,   182,   178,   204,   205,   357,   177,   401,
   240,   207,   209,   107,   108,   206,   206,    93,   165,   167,
   290,    91,   267,   257,   173,   101,   443,   261,   196,   111,
   113,   333,   333,   236,     1,   302,   292,   236,   442,   211,
   293,   508,   255,   343,   511,   330,   335,   260,   360,   387,
   389,   444,   446,   510,   355,   319,   328,   459,   123,   307,
   462,   356,   495,   460,   461,   493,   357,   463,   183,   404,
   118,   117,   415,   353,   253,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   112,   112,   298,   168,
   337,   238,   297,    93,   244,   221,   222,   220,     7,   116,
   226,    94,   356,   402,   299,   194,   300,   357,   193,   499,
   246,   243,   104,   104,   110,   533,   237,   173,   105,   424,
   515,   523,   225,   224,   406,   112,   219,   452,   529,   531,
   361,     5,     2,   351,   443,   400,   nil,   173,   nil,   nil,
   443,   nil,   nil,   nil,   nil,   nil,   516,   nil,   338,   nil,
   405,   nil,   520,   114,   433,   211,   211,   365,   236,   nil,
   nil,   407,   422,   519,   454,   521,   nil,   348,   211,   112,
   nil,   nil,   456,   112,   nil,   nil,   112,   112,   nil,   203,
   203,   nil,   211,   210,   nil,    96,   nil,    94,   nil,   nil,
   467,   211,   211,   nil,   390,   339,   nil,   104,   352,   nil,
   nil,   104,   nil,   168,   110,   nil,   nil,   nil,   nil,   nil,
   412,   nil,   443,   nil,   119,   nil,   nil,   392,   nil,   119,
   213,   nil,   391,   472,   549,   nil,   423,   403,   nil,   nil,
   383,   173,   538,   386,   nil,   nil,   168,   nil,   nil,   nil,
   414,   441,   427,   300,   443,   443,   295,   nil,   nil,   nil,
   112,   nil,   112,   112,   112,   nil,   560,   561,   nil,   nil,
   nil,   356,   112,   112,   173,   112,   357,   466,   112,   218,
   477,   nil,   nil,   432,   503,   nil,   nil,   nil,   nil,   nil,
   nil,   333,   nil,   nil,   327,   327,   332,   332,   nil,   524,
   nil,   nil,   341,   nil,   nil,   nil,   nil,   341,   nil,   nil,
   112,   490,   168,   nil,   112,   485,   486,   428,   484,   nil,
   211,   487,   488,   nil,   nil,   206,   206,   nil,   211,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   412,   nil,   483,   nil,
   173,   374,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   211,
   nil,   nil,   nil,   384,   385,   nil,   363,   364,   nil,   nil,
   nil,   nil,   168,   168,   506,   nil,   501,   nil,   177,   371,
   507,   238,   nil,   300,   nil,   480,   479,   474,    93,   nil,
   nil,   nil,   473,   379,   112,   nil,   nil,   112,   112,   nil,
   173,   173,   363,   364,   nil,   nil,   528,   112,   nil,   nil,
   540,   532,   412,   nil,   nil,   nil,   nil,   367,   nil,   174,
   nil,   nil,   112,   369,   nil,   nil,   nil,   112,   112,   nil,
   nil,   nil,   180,   nil,   nil,   376,   nil,   nil,   nil,   nil,
   112,   381,   nil,   412,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   341,   nil,   nil,   nil,   nil,   nil,   541,   542,   112,
   nil,   nil,   nil,   119,   nil,   408,   nil,   553,   nil,   341,
   392,   537,   nil,   564,   175,   nil,   230,   nil,   nil,   nil,
   230,   nil,    94,   230,   104,   nil,   nil,   181,   nil,   nil,
   nil,   104,   nil,   562,   nil,   nil,   110,   555,   nil,   nil,
   nil,   nil,   559,   nil,   nil,   nil,   177,   nil,   nil,   203,
   203,   nil,   nil,   489,   nil,   112,   112,   439,   120,   563,
   557,   475,   174,   112,   nil,   nil,   439,   nil,   451,   478,
   nil,   231,   nil,   451,   nil,   231,   227,   nil,   231,   112,
   241,   nil,   174,   245,   nil,   nil,   nil,   nil,   nil,   nil,
   213,   nil,   112,   469,   327,   nil,   517,   230,   nil,   230,
   230,   230,   nil,   522,   nil,   nil,   332,   nil,   341,   nil,
   230,   nil,   349,   nil,   nil,   230,   nil,   175,   nil,   nil,
   nil,   341,   155,   156,   157,   158,   159,   160,   161,   162,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   175,   nil,   nil,
   469,   nil,   nil,   408,   nil,   nil,   nil,   230,   nil,   nil,
   nil,   230,   231,   nil,   231,   231,   231,   313,   nil,   314,
   315,   316,   nil,   nil,   nil,   231,   nil,   350,   nil,   nil,
   231,   469,   nil,   nil,   nil,   nil,   174,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   231,   nil,   nil,   nil,   231,   372,   nil,   174,
   nil,   377,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   425,   nil,   nil,   230,   230,   nil,   nil,   nil,   nil,
   nil,   175,   nil,   nil,   230,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   230,
   nil,   nil,   nil,   nil,   230,   230,   nil,   nil,   nil,   nil,
   nil,   nil,   155,   162,   175,   nil,   nil,   230,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   174,   426,   nil,   nil,   231,
   231,   431,   nil,   nil,   434,   435,   230,   nil,   nil,   231,
   nil,   nil,   nil,   nil,   440,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   231,   nil,   nil,   nil,   nil,   231,
   231,   nil,   nil,   nil,   nil,   464,   nil,   nil,   nil,   nil,
   nil,   nil,   231,   nil,   nil,   174,   174,   nil,   nil,   nil,
   175,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   231,   230,   230,   nil,   nil,   431,   nil,   nil,   nil,
   230,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   230,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   230,
   175,   175,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   231,   231,   nil,
   nil,   nil,   512,   314,   nil,   231,   nil,   nil,   nil,   nil,
   514,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   231,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   231 ]

racc_goto_check = [
    58,    41,    41,    41,    40,    40,    28,    93,     4,    36,
    62,   118,    11,    83,    64,    73,    73,    14,    28,   119,
    25,    51,    51,    22,    19,    50,    50,     9,    67,    67,
    27,     7,    31,    30,    80,    15,    60,    30,    96,    21,
    21,   104,   104,    78,     1,    70,    57,    78,   102,    28,
    56,    69,    37,    92,    69,    89,    89,    37,    92,    33,
    33,   103,   103,    68,    95,    88,    88,    55,    46,    71,
    72,    11,    45,    76,    77,    44,    14,    79,    21,    43,
    38,    35,    63,    85,    34,    28,    28,    28,    28,    28,
    28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
    28,    28,    28,    28,    28,    28,    61,    61,    64,    28,
    30,    22,    28,     9,    19,     9,     9,     7,     5,    32,
    15,     5,    11,    95,    28,    90,    28,    14,    91,    29,
    21,    20,     5,     5,     5,    94,    18,    80,    17,    98,
    99,   100,    16,    10,    27,    61,     8,   105,   106,   108,
   117,     3,     2,    83,    60,   120,   nil,    80,   nil,   nil,
    60,   nil,   nil,   nil,   nil,   nil,   102,   nil,    96,   nil,
    31,   nil,   102,    24,    95,    28,    28,    28,    78,   nil,
   nil,    30,    70,   103,   104,   103,   nil,    80,    28,    61,
   nil,   nil,    92,    61,   nil,   nil,    61,    61,   nil,     5,
     5,   nil,    28,     5,   nil,     6,   nil,     5,   nil,   nil,
    92,    28,    28,   nil,    28,    21,   nil,     5,    21,   nil,
   nil,     5,   nil,    28,     5,   nil,   nil,   nil,   nil,   nil,
    78,   nil,    60,   nil,    41,   nil,   nil,    41,   nil,    41,
    24,   nil,    36,    27,   102,   nil,    78,    36,   nil,   nil,
     4,    80,   119,     4,   nil,   nil,    28,   nil,   nil,   nil,
    62,    78,    83,    28,    60,    60,     5,   nil,   nil,   nil,
    61,   nil,    61,    61,    61,   nil,   102,   102,   nil,   nil,
   nil,    11,    61,    61,    80,    61,    14,    78,    61,     6,
    25,   nil,   nil,    67,    27,   nil,   nil,   nil,   nil,   nil,
   nil,   104,   nil,   nil,     5,     5,     5,     5,   nil,    92,
   nil,   nil,     5,   nil,   nil,   nil,   nil,     5,   nil,   nil,
    61,   118,    28,   nil,    61,    73,    73,    21,    37,   nil,
    28,    51,    51,   nil,   nil,    50,    50,   nil,    28,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    78,   nil,    28,   nil,
    80,     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,
   nil,   nil,   nil,     5,     5,   nil,    24,    24,   nil,   nil,
   nil,   nil,    28,    28,    64,   nil,    62,   nil,    28,    24,
    28,    22,   nil,    28,   nil,     4,    19,    15,     9,   nil,
   nil,   nil,     7,    24,    61,   nil,   nil,    61,    61,   nil,
    80,    80,    24,    24,   nil,   nil,    93,    61,   nil,   nil,
    30,    93,    78,   nil,   nil,   nil,   nil,     6,   nil,    81,
   nil,   nil,    61,     6,   nil,   nil,   nil,    61,    61,   nil,
   nil,   nil,    81,   nil,   nil,     6,   nil,   nil,   nil,   nil,
    61,     6,   nil,    78,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     5,   nil,   nil,   nil,   nil,   nil,    28,    28,    61,
   nil,   nil,   nil,    41,   nil,     6,   nil,    93,   nil,     5,
    41,    36,   nil,    30,    82,   nil,    81,   nil,   nil,   nil,
    81,   nil,     5,    81,     5,   nil,   nil,    82,   nil,   nil,
   nil,     5,   nil,    93,   nil,   nil,     5,    58,   nil,   nil,
   nil,   nil,    64,   nil,   nil,   nil,    28,   nil,   nil,     5,
     5,   nil,   nil,     5,   nil,    61,    61,     6,    41,    58,
    40,    24,    81,    61,   nil,   nil,     6,   nil,     6,    24,
   nil,    82,   nil,     6,   nil,    82,    23,   nil,    82,    61,
    23,   nil,    81,    23,   nil,   nil,   nil,   nil,   nil,   nil,
    24,   nil,    61,     6,     5,   nil,     5,    81,   nil,    81,
    81,    81,   nil,     5,   nil,   nil,     5,   nil,     5,   nil,
    81,   nil,    81,   nil,   nil,    81,   nil,    82,   nil,   nil,
   nil,     5,    49,    49,    49,    49,    49,    49,    49,    49,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    82,   nil,   nil,
     6,   nil,   nil,     6,   nil,   nil,   nil,    81,   nil,   nil,
   nil,    81,    82,   nil,    82,    82,    82,    23,   nil,    23,
    23,    23,   nil,   nil,   nil,    82,   nil,    82,   nil,   nil,
    82,     6,   nil,   nil,   nil,   nil,    81,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    82,   nil,   nil,   nil,    82,    23,   nil,    81,
   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    81,   nil,   nil,    81,    81,   nil,   nil,   nil,   nil,
   nil,    82,   nil,   nil,    81,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    81,
   nil,   nil,   nil,   nil,    81,    81,   nil,   nil,   nil,   nil,
   nil,   nil,    49,    49,    82,   nil,   nil,    81,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    81,    82,   nil,   nil,    82,
    82,    23,   nil,   nil,    23,    23,    81,   nil,   nil,    82,
   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    82,   nil,   nil,   nil,   nil,    82,
    82,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,
   nil,   nil,    82,   nil,   nil,    81,    81,   nil,   nil,   nil,
    82,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    82,    81,    81,   nil,   nil,    23,   nil,   nil,   nil,
    81,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    81,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    81,
    82,    82,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    82,    82,   nil,
   nil,   nil,    23,    23,   nil,    82,   nil,   nil,   nil,   nil,
    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    82,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    82 ]

racc_goto_pointer = [
   nil,    44,   152,   149,     3,   115,   198,    25,    54,    21,
    43,  -188,   nil,   nil,  -183,    18,    40,   120,    30,     5,
    22,    19,     5,   433,   151,   -86,   nil,  -119,   -40,  -279,
   -84,   -92,    97,  -192,   -30,    59,   -13,   -63,    58,   nil,
   -19,   -21,   nil,  -182,  -329,  -332,    44,   nil,   nil,   553,
   -61,   -65,   nil,   nil,   nil,  -272,  -100,  -104,   -37,   nil,
  -286,    86,   -36,  -214,   -44,   nil,   nil,   -16,  -360,  -369,
  -121,  -100,  -271,   -69,   nil,   nil,  -266,  -265,   -60,  -264,
   -12,   373,   428,   -46,   nil,  -116,   nil,   nil,  -124,  -136,
    60,    63,  -144,   -59,  -336,  -136,   -27,   nil,  -167,  -299,
  -310,   nil,  -274,  -262,  -150,  -185,  -318,   nil,  -320,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -58,   -78,  -239,
  -103 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    55,   100,   nil,   nil,    52,
    69,    12,    13,    14,    15,   nil,   nil,   239,   nil,   nil,
   nil,   233,   103,   340,    90,   nil,   265,   nil,    27,   266,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    71,
   nil,    70,    75,   nil,   nil,   nil,   nil,    72,    73,    26,
    28,    42,    37,    38,    39,   148,   nil,   325,    47,    45,
    40,    41,   291,   nil,   nil,    43,    44,   301,   304,   305,
   nil,   172,   344,   nil,    54,    53,   nil,   nil,   217,   345,
   229,    56,    57,   232,   185,   nil,    61,    62,   nil,   nil,
   nil,   nil,   nil,   nil,    67,   nil,   nil,   306,   nil,   320,
   331,   321,   nil,   322,   326,   nil,   346,   347,   359,    74,
    76,    77,    78,    79,    80,    81,    82,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 87, :_reduce_1,
  0, 88, :_reduce_none,
  3, 88, :_reduce_3,
  0, 89, :_reduce_4,
  3, 89, :_reduce_5,
  4, 89, :_reduce_6,
  1, 93, :_reduce_7,
  2, 93, :_reduce_8,
  2, 93, :_reduce_9,
  1, 94, :_reduce_10,
  3, 94, :_reduce_11,
  0, 96, :_reduce_12,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  2, 97, :_reduce_18,
  4, 97, :_reduce_19,
  2, 97, :_reduce_20,
  4, 97, :_reduce_21,
  2, 97, :_reduce_22,
  4, 97, :_reduce_23,
  2, 98, :_reduce_24,
  3, 98, :_reduce_25,
  5, 98, :_reduce_26,
  6, 98, :_reduce_27,
  2, 98, :_reduce_28,
  5, 98, :_reduce_29,
  2, 101, :_reduce_30,
  4, 101, :_reduce_31,
  3, 101, :_reduce_32,
  4, 103, :_reduce_33,
  3, 103, :_reduce_34,
  1, 111, :_reduce_none,
  2, 111, :_reduce_36,
  1, 111, :_reduce_37,
  2, 105, :_reduce_38,
  2, 112, :_reduce_39,
  4, 112, :_reduce_40,
  4, 112, :_reduce_41,
  1, 112, :_reduce_42,
  1, 115, :_reduce_none,
  2, 115, :_reduce_44,
  1, 117, :_reduce_45,
  3, 117, :_reduce_46,
  3, 118, :_reduce_47,
  3, 118, :_reduce_48,
  2, 118, :_reduce_49,
  2, 119, :_reduce_50,
  2, 120, :_reduce_51,
  5, 121, :_reduce_52,
  1, 121, :_reduce_53,
  1, 121, :_reduce_54,
  2, 124, :_reduce_55,
  2, 125, :_reduce_56,
  1, 126, :_reduce_57,
  3, 126, :_reduce_58,
  5, 128, :_reduce_59,
  4, 131, :_reduce_60,
  0, 129, :_reduce_61,
  2, 129, :_reduce_62,
  0, 130, :_reduce_none,
  2, 130, :_reduce_64,
  0, 132, :_reduce_none,
  1, 132, :_reduce_none,
  5, 133, :_reduce_67,
  4, 134, :_reduce_68,
  1, 114, :_reduce_none,
  3, 114, :_reduce_70,
  3, 114, :_reduce_71,
  3, 114, :_reduce_72,
  3, 114, :_reduce_73,
  3, 114, :_reduce_74,
  3, 114, :_reduce_75,
  3, 114, :_reduce_76,
  3, 114, :_reduce_77,
  3, 114, :_reduce_78,
  3, 114, :_reduce_79,
  3, 114, :_reduce_80,
  3, 114, :_reduce_81,
  3, 114, :_reduce_82,
  3, 114, :_reduce_83,
  3, 114, :_reduce_84,
  3, 114, :_reduce_85,
  3, 114, :_reduce_86,
  3, 114, :_reduce_87,
  3, 114, :_reduce_88,
  3, 114, :_reduce_89,
  1, 135, :_reduce_none,
  2, 135, :_reduce_91,
  2, 135, :_reduce_92,
  2, 135, :_reduce_93,
  2, 135, :_reduce_94,
  2, 135, :_reduce_95,
  2, 135, :_reduce_96,
  2, 135, :_reduce_97,
  2, 135, :_reduce_98,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  2, 138, :_reduce_102,
  3, 138, :_reduce_103,
  4, 138, :_reduce_104,
  5, 138, :_reduce_105,
  3, 142, :_reduce_106,
  4, 142, :_reduce_107,
  5, 142, :_reduce_108,
  3, 140, :_reduce_109,
  2, 139, :_reduce_110,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  3, 145, :_reduce_113,
  5, 145, :_reduce_114,
  5, 145, :_reduce_115,
  4, 145, :_reduce_116,
  6, 145, :_reduce_117,
  8, 145, :_reduce_118,
  1, 145, :_reduce_none,
  4, 145, :_reduce_120,
  2, 145, :_reduce_121,
  2, 145, :_reduce_122,
  4, 145, :_reduce_123,
  1, 145, :_reduce_none,
  1, 149, :_reduce_125,
  3, 154, :_reduce_126,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  3, 153, :_reduce_129,
  5, 153, :_reduce_130,
  1, 136, :_reduce_none,
  3, 136, :_reduce_132,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 158, :_reduce_none,
  0, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 91, :_reduce_138,
  2, 91, :_reduce_139,
  3, 91, :_reduce_140,
  1, 160, :_reduce_141,
  1, 95, :_reduce_142,
  1, 161, :_reduce_143,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  2, 162, :_reduce_149,
  3, 162, :_reduce_150,
  1, 162, :_reduce_151,
  1, 162, :_reduce_none,
  0, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 147, :_reduce_none,
  1, 143, :_reduce_156,
  1, 123, :_reduce_157,
  1, 164, :_reduce_158,
  1, 92, :_reduce_159,
  1, 165, :_reduce_160,
  2, 165, :_reduce_161,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  3, 109, :_reduce_167,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  2, 157, :_reduce_171,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  3, 170, :_reduce_176,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 152, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 107, :_reduce_185,
  3, 107, :_reduce_186,
  3, 107, :_reduce_187,
  4, 168, :_reduce_188,
  4, 168, :_reduce_189,
  2, 168, :_reduce_190,
  3, 168, :_reduce_191,
  5, 168, :_reduce_192,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  2, 169, :_reduce_195,
  3, 166, :_reduce_196,
  3, 172, :_reduce_197,
  4, 172, :_reduce_198,
  4, 172, :_reduce_199,
  3, 173, :_reduce_200,
  4, 173, :_reduce_201,
  4, 173, :_reduce_202,
  5, 176, :_reduce_203,
  3, 99, :_reduce_204,
  2, 99, :_reduce_205,
  5, 180, :_reduce_206,
  2, 180, :_reduce_207,
  4, 144, :_reduce_208,
  2, 144, :_reduce_209,
  5, 167, :_reduce_210,
  0, 182, :_reduce_211,
  2, 182, :_reduce_212,
  3, 177, :_reduce_213,
  0, 179, :_reduce_214,
  2, 179, :_reduce_215,
  4, 179, :_reduce_216,
  1, 183, :_reduce_217,
  1, 183, :_reduce_218,
  3, 183, :_reduce_219,
  3, 183, :_reduce_220,
  0, 156, :_reduce_221,
  2, 156, :_reduce_222,
  1, 90, :_reduce_223,
  3, 90, :_reduce_224,
  1, 102, :_reduce_225,
  3, 102, :_reduce_226,
  1, 104, :_reduce_227,
  3, 104, :_reduce_228,
  1, 106, :_reduce_229,
  3, 106, :_reduce_230,
  1, 174, :_reduce_231,
  3, 174, :_reduce_232,
  1, 175, :_reduce_233,
  3, 175, :_reduce_234,
  3, 185, :_reduce_235,
  2, 185, :_reduce_236,
  4, 185, :_reduce_237,
  3, 185, :_reduce_238,
  5, 185, :_reduce_239,
  5, 185, :_reduce_240,
  1, 190, :_reduce_241,
  3, 190, :_reduce_242,
  1, 189, :_reduce_none,
  2, 186, :_reduce_244,
  1, 186, :_reduce_245,
  3, 186, :_reduce_246,
  4, 191, :_reduce_247,
  1, 192, :_reduce_248,
  2, 192, :_reduce_249,
  2, 192, :_reduce_250,
  1, 192, :_reduce_251,
  1, 193, :_reduce_252,
  3, 193, :_reduce_253,
  0, 178, :_reduce_254,
  1, 178, :_reduce_none,
  0, 194, :_reduce_256,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  5, 195, :_reduce_273,
  1, 196, :_reduce_274,
  2, 197, :_reduce_275,
  2, 198, :_reduce_276,
  2, 199, :_reduce_277,
  3, 199, :_reduce_278,
  3, 203, :_reduce_279,
  4, 203, :_reduce_280,
  5, 203, :_reduce_281,
  2, 200, :_reduce_282,
  2, 201, :_reduce_283,
  2, 202, :_reduce_284,
  1, 205, :_reduce_none,
  1, 205, :_reduce_286,
  2, 205, :_reduce_287,
  2, 205, :_reduce_288,
  2, 205, :_reduce_289,
  2, 205, :_reduce_290,
  2, 205, :_reduce_291,
  2, 205, :_reduce_292,
  1, 127, :_reduce_none,
  3, 127, :_reduce_294,
  3, 127, :_reduce_295,
  3, 127, :_reduce_296,
  2, 127, :_reduce_297,
  2, 127, :_reduce_298,
  2, 116, :_reduce_299,
  3, 116, :_reduce_300,
  1, 206, :_reduce_301,
  3, 206, :_reduce_302,
  1, 181, :_reduce_303,
  3, 181, :_reduce_304,
  1, 187, :_reduce_305,
  3, 187, :_reduce_306,
  1, 108, :_reduce_307,
  3, 108, :_reduce_308,
  1, 110, :_reduce_309,
  3, 110, :_reduce_310,
  1, 113, :_reduce_311,
  3, 113, :_reduce_312,
  0, 184, :_reduce_none,
  1, 184, :_reduce_none,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 204, :_reduce_none,
  1, 204, :_reduce_none,
  0, 122, :_reduce_none,
  1, 122, :_reduce_none,
  0, 188, :_reduce_none,
  1, 188, :_reduce_none ]

racc_reduce_n = 323

racc_shift_n = 566

racc_token_table = {
  false => 0,
  :error => 1,
  :BREAK => 2,
  :CASE => 3,
  :CHAN => 4,
  :CONST => 5,
  :CONTINUE => 6,
  :DEFAULT => 7,
  :DEFER => 8,
  :ELSE => 9,
  :FALL => 10,
  :FOR => 11,
  :DEF => 12,
  :DO => 13,
  :FUNC => 14,
  :GO => 15,
  :GOTO => 16,
  :IF => 17,
  :IMPORT => 18,
  :INTERFACE => 19,
  :MAP => 20,
  :NAME => 21,
  :PACKAGE => 22,
  :RANGE => 23,
  :RETURN => 24,
  :SELECT => 25,
  :STRUCT => 26,
  :SWITCH => 27,
  :TYPE => 28,
  :VAR => 29,
  :BODY => 30,
  :IGNORE => 31,
  :COMMENT => 32,
  :INDENT => 33,
  :OUTDENT => 34,
  :TERM => 35,
  :IN => 36,
  :COP => 37,
  :STRING => 38,
  :NUMBER => 39,
  :MODULE => 40,
  :CLASS => 41,
  :REGEX => 42,
  :ToRightParen => 43,
  ")" => 44,
  "(" => 45,
  :NotParen => 46,
  "*" => 47,
  "/" => 48,
  "%" => 49,
  "&" => 50,
  "<<" => 51,
  ">>" => 52,
  "&^" => 53,
  "+" => 54,
  "-" => 55,
  "|" => 56,
  "^" => 57,
  "==" => 58,
  "!=" => 59,
  "<=" => 60,
  ">=" => 61,
  "<" => 62,
  ">" => 63,
  "&&" => 64,
  "||" => 65,
  "<-" => 66,
  "." => 67,
  "=" => 68,
  ":=" => 69,
  "!" => 70,
  "~" => 71,
  "..." => 72,
  "::" => 73,
  "[" => 74,
  "]" => 75,
  ":" => 76,
  "{" => 77,
  "}" => 78,
  "@" => 79,
  "?" => 80,
  ";" => 81,
  "," => 82,
  "->" => 83,
  "++" => 84,
  "--" => 85 }

racc_nt_base = 86

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "BREAK",
  "CASE",
  "CHAN",
  "CONST",
  "CONTINUE",
  "DEFAULT",
  "DEFER",
  "ELSE",
  "FALL",
  "FOR",
  "DEF",
  "DO",
  "FUNC",
  "GO",
  "GOTO",
  "IF",
  "IMPORT",
  "INTERFACE",
  "MAP",
  "NAME",
  "PACKAGE",
  "RANGE",
  "RETURN",
  "SELECT",
  "STRUCT",
  "SWITCH",
  "TYPE",
  "VAR",
  "BODY",
  "IGNORE",
  "COMMENT",
  "INDENT",
  "OUTDENT",
  "TERM",
  "IN",
  "COP",
  "STRING",
  "NUMBER",
  "MODULE",
  "CLASS",
  "REGEX",
  "ToRightParen",
  "\")\"",
  "\"(\"",
  "NotParen",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"&\"",
  "\"<<\"",
  "\">>\"",
  "\"&^\"",
  "\"+\"",
  "\"-\"",
  "\"|\"",
  "\"^\"",
  "\"==\"",
  "\"!=\"",
  "\"<=\"",
  "\">=\"",
  "\"<\"",
  "\">\"",
  "\"&&\"",
  "\"||\"",
  "\"<-\"",
  "\".\"",
  "\"=\"",
  "\":=\"",
  "\"!\"",
  "\"~\"",
  "\"...\"",
  "\"::\"",
  "\"[\"",
  "\"]\"",
  "\":\"",
  "\"{\"",
  "\"}\"",
  "\"@\"",
  "\"?\"",
  "\";\"",
  "\",\"",
  "\"->\"",
  "\"++\"",
  "\"--\"",
  "$start",
  "root",
  "package",
  "imports",
  "xdcl_list",
  "sym",
  "term",
  "import_stmt",
  "import_stmt_list",
  "string",
  "xdcl",
  "common_dcl",
  "oo_dcl",
  "xfndcl",
  "non_dcl_stmt",
  "vardcl",
  "vardcl_list",
  "constdcl",
  "constdcl_list",
  "typedcl",
  "typedcl_list",
  "dotname",
  "dcl_name_list",
  "ntype",
  "expr_list",
  "constdcl1",
  "case",
  "expr_or_type_list",
  "expr",
  "caseblock",
  "suite_stmt",
  "caseblock_list",
  "range_stmt",
  "range",
  "inrange",
  "for_header",
  "osimple_stmt",
  "semi",
  "for_body",
  "for_stmt",
  "if_header",
  "simple_stmt",
  "if_stmt",
  "elseif_list",
  "else",
  "elseif",
  "oif_header",
  "switch_stmt",
  "select_stmt",
  "uexpr",
  "pexpr",
  "pseudocall",
  "call",
  "call_do",
  "call_self",
  "special",
  "simple_call",
  "nameo",
  "fnliteral",
  "pexpr_no_paren",
  "literal",
  "name",
  "expr_or_type",
  "type",
  "oexpr",
  "convtype",
  "comptype",
  "braced_keyval",
  "keyval",
  "complitexpr",
  "braced_keyval_list",
  "non_expr_type",
  "name_or_type",
  "osym",
  "regex",
  "number",
  "specialfn",
  "ospecialfn",
  "comma",
  "dotdotdot",
  "recvchantype",
  "fntype",
  "othertype",
  "ptrtype",
  "non_recvchantype",
  "fnret_type",
  "structtype",
  "interfacetype",
  "structdcl_list",
  "interfacedcl_list",
  "fndcl",
  "fname",
  "oarg_type_list",
  "fnres",
  "fnlitdcl",
  "stmt_list",
  "optr",
  "keyval_list",
  "ocomma",
  "structdcl",
  "interfacedcl",
  "sym_list",
  "oliteral",
  "embed",
  "packname",
  "indcl",
  "arg_type",
  "arg_type_list",
  "stmt",
  "label_stmt",
  "fall_stmt",
  "break_stmt",
  "continue_stmt",
  "go_stmt",
  "defer_stmt",
  "goto_stmt",
  "return_stmt",
  "go_call",
  "oexpr_list",
  "small_stmt",
  "small_stmt_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_1(val, _values)
     Root.new(val[0], val[1], val[2]) 
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.y', 35)
  def _reduce_3(val, _values)
     Package.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_4(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_5(val, _values)
     [val[1]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_6(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 43)
  def _reduce_7(val, _values)
     Import.new(nil, val[0]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 44)
  def _reduce_8(val, _values)
     Import.new(val[0], val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_9(val, _values)
     Import.new(val[0], val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_10(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_11(val, _values)
     val[0] << val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_12(val, _values)
     Line.new 
  end
.,.,

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_18(val, _values)
     DclVar.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_19(val, _values)
     DclVar.new(ParensIndent.new(val[2])) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_20(val, _values)
     DclConst.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_21(val, _values)
     DclConst.new(ParensIndent.new(val[2])) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_22(val, _values)
     DclType.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_23(val, _values)
     DclType.new(ParensIndent.new(val[2])) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_24(val, _values)
     DclClass.new(val[1], nil, []) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_25(val, _values)
     DclClass.new(val[1], val[2], []) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 73)
  def _reduce_26(val, _values)
     DclClass.new(val[1], nil, val[3]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_27(val, _values)
     DclClass.new(val[1], val[2], val[4]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_28(val, _values)
     DclModule.new(val[1], []) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_29(val, _values)
     DclModule.new(val[1], val[3]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_30(val, _values)
     DclCommon.new(val[0], val[1], []) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_31(val, _values)
     DclCommon.new(val[0], val[1], val[3]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_32(val, _values)
     DclCommon.new(val[0], nil, val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_33(val, _values)
     DclCommon.new(val[0], val[1], val[3]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_34(val, _values)
     DclCommon.new(val[0], nil, val[2]) 
  end
.,.,

# reduce 35 omitted

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_36(val, _values)
     DclCommon.new(val[0], val[1], []) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_37(val, _values)
     DclCommon.new(val[0], nil, [])
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_38(val, _values)
     DclCommon.new([val[0]], val[1], []) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_39(val, _values)
     SwitchCase.new(val[0], val[1], nil) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_40(val, _values)
     SwitchCase.new(val[0], Expr.new(val[1], val[2], val[3]), nil) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_41(val, _values)
     SwitchCase.new(val[0], Expr.new(val[1], val[2], val[3]), nil) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_42(val, _values)
     SwitchCase.new(val[0], nil, nil)
  end
.,.,

# reduce 43 omitted

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_44(val, _values)
     val[0].statements = [val[1]]; val[0] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_45(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_46(val, _values)
     val[0] << val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_47(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_48(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_49(val, _values)
     Expr.new(val[0], ':=', val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_50(val, _values)
     Range.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_51(val, _values)
     Range.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 121)
  def _reduce_52(val, _values)
     val 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_53(val, _values)
     val 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_54(val, _values)
     val 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 126)
  def _reduce_55(val, _values)
     For.new(val[0], val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_56(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_57(val, _values)
     If::Header.new([val[0]]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_58(val, _values)
     If::Header.new(val) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_59(val, _values)
     If.new(val[1], val[2], val[3], val[4]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_60(val, _values)
     If::ElseIf.new(val[2], val[3]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_61(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_62(val, _values)
     val[0] << val[1] 
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_64(val, _values)
     If::Else.new(val[1]) 
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_67(val, _values)
     Switch.new(val[1], val[3]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_68(val, _values)
     Select.new(val[2]) 
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_70(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_71(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_72(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_73(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_74(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_75(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_76(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_77(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_78(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_79(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_80(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_81(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_82(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_83(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 181)
  def _reduce_84(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_85(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_86(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_87(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_88(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_89(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

# reduce 90 omitted

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_91(val, _values)
     Expr.new([], val[0], val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 192)
  def _reduce_92(val, _values)
     Expr.new([], val[0], val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 193)
  def _reduce_93(val, _values)
     Expr.new([], val[0], val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 194)
  def _reduce_94(val, _values)
     Expr.new([], val[0], val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 195)
  def _reduce_95(val, _values)
     Expr.new([], val[0], val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 196)
  def _reduce_96(val, _values)
     Expr.new([], val[0], val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 197)
  def _reduce_97(val, _values)
     Expr.new([], val[0], val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 198)
  def _reduce_98(val, _values)
     Expr.new([], val[0], val[1]) 
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

module_eval(<<'.,.,', 'grammar.y', 210)
  def _reduce_102(val, _values)
     Call.new(val[0], val[1], [], false) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 211)
  def _reduce_103(val, _values)
     Call.new(val[0], nil, [], false) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_104(val, _values)
     Call.new(val[0], nil, val[2], false) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_105(val, _values)
     Call.new(val[0], nil, val[2], true) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 216)
  def _reduce_106(val, _values)
     Call.new(val[0], nil, [], false) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_107(val, _values)
     Call.new(val[0], nil, val[2], false) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_108(val, _values)
     Call.new(val[0], nil, val[2], true) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 221)
  def _reduce_109(val, _values)
     val[2].args.unshift(val[0]); val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 227)
  def _reduce_110(val, _values)
     args = val[0].args; args << Comma.new unless args.empty?; args << val[1]; val[0] 
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_113(val, _values)
     ExprSelector.new(val[0], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_114(val, _values)
     ExprTypeAssert.new(val[0], val[3]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 235)
  def _reduce_115(val, _values)
     ExprTypeAssert.new(val[0], val[3]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_116(val, _values)
     ExprIndex.new(val[0], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_117(val, _values)
     ExprSlice.new(val[0], val[2], val[4], nil) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_118(val, _values)
     ExprSlice.new(val[0], val[2], val[4], val[6]) 
  end
.,.,

# reduce 119 omitted

module_eval(<<'.,.,', 'grammar.y', 240)
  def _reduce_120(val, _values)
     Conversion.new(val[0], nil, val[2], false) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_121(val, _values)
     CompLiteral.new(val[0], val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 242)
  def _reduce_122(val, _values)
     CompLiteral.new(val[0], val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 243)
  def _reduce_123(val, _values)
     CompLiteral.new(Parens.new(val[1]), val[3])
  end
.,.,

# reduce 124 omitted

module_eval(<<'.,.,', 'grammar.y', 247)
  def _reduce_125(val, _values)
     Literal.new(val[0], @token) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 250)
  def _reduce_126(val, _values)
     KeyType.new(val[0], val[2]) 
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'grammar.y', 258)
  def _reduce_129(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 259)
  def _reduce_130(val, _values)
     val[2] 
  end
.,.,

# reduce 131 omitted

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_132(val, _values)
     Parens.new(val[1]) 
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_138(val, _values)
     Literal.new(val[0], @token) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_139(val, _values)
     InstanceVar.new(val[1], @token) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 283)
  def _reduce_140(val, _values)
     ClassVar.new(val[2], @token) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_141(val, _values)
     RegexType.new(val[0], @token) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 289)
  def _reduce_142(val, _values)
     StringType.new(val[0], @token) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_143(val, _values)
     NumericType.new(val[0], @token) 
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

module_eval(<<'.,.,', 'grammar.y', 304)
  def _reduce_149(val, _values)
     val.join 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 305)
  def _reduce_150(val, _values)
     val.join 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_151(val, _values)
     val[0] 
  end
.,.,

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_156(val, _values)
     Literal.new(val[0], @token) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 319)
  def _reduce_157(val, _values)
     Semicolon.new 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_158(val, _values)
     Comma.new 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 325)
  def _reduce_159(val, _values)
     Line.new 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 337)
  def _reduce_160(val, _values)
     Variadic.new(nil) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 338)
  def _reduce_161(val, _values)
     Variadic.new(val[1]) 
  end
.,.,

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

module_eval(<<'.,.,', 'grammar.y', 346)
  def _reduce_167(val, _values)
     Parens.new(val[1]) 
  end
.,.,

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

module_eval(<<'.,.,', 'grammar.y', 352)
  def _reduce_171(val, _values)
     PointerType.new(val[1]) 
  end
.,.,

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

module_eval(<<'.,.,', 'grammar.y', 359)
  def _reduce_176(val, _values)
     Parens.new(val[1]) 
  end
.,.,

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

module_eval(<<'.,.,', 'grammar.y', 376)
  def _reduce_185(val, _values)
     QualifiedIdent.new(nil, nil, val[0]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 377)
  def _reduce_186(val, _values)
     QualifiedIdent.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_187(val, _values)
     QualifiedIdent.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 381)
  def _reduce_188(val, _values)
     ArrayType.new(val[1], val[3]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 382)
  def _reduce_189(val, _values)
     ArrayType.new(Variadic.new(nil), val[3]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 383)
  def _reduce_190(val, _values)
     ChanType::SendRecv.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 384)
  def _reduce_191(val, _values)
     ChanType::Send.new(val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 385)
  def _reduce_192(val, _values)
     MapType.new(val[2], val[4]) 
  end
.,.,

# reduce 193 omitted

# reduce 194 omitted

module_eval(<<'.,.,', 'grammar.y', 390)
  def _reduce_195(val, _values)
     PointerType.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 393)
  def _reduce_196(val, _values)
     Chan::Recv.new(val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 396)
  def _reduce_197(val, _values)
     StructType.new([]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 397)
  def _reduce_198(val, _values)
     StructType.new(val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 398)
  def _reduce_199(val, _values)
     StructType.new(val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 401)
  def _reduce_200(val, _values)
     InterfaceType.new([]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 402)
  def _reduce_201(val, _values)
     InterfaceType.new(val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 403)
  def _reduce_202(val, _values)
     InterfaceType.new(val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 411)
  def _reduce_203(val, _values)
     Function.new(val[0], val[2], val[4], nil) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 414)
  def _reduce_204(val, _values)
     val[1].body = val[2]; val[1] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 415)
  def _reduce_205(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 418)
  def _reduce_206(val, _values)
     FunctionDo.new(nil, val[2], val[4], nil) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 419)
  def _reduce_207(val, _values)
     FunctionDo.new(nil, [], val[2], nil) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 423)
  def _reduce_208(val, _values)
     val[0].body = val[2]; val[0] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 424)
  def _reduce_209(val, _values)
     val[0].body = val[2]; val[0] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 427)
  def _reduce_210(val, _values)
     Function.new(nil, val[2], val[4], nil) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 430)
  def _reduce_211(val, _values)
     0 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 431)
  def _reduce_212(val, _values)
     val[1] += 1 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 434)
  def _reduce_213(val, _values)
     Function::Name.new(val[0], val[1], val[3]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 437)
  def _reduce_214(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 438)
  def _reduce_215(val, _values)
     [val[1]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 439)
  def _reduce_216(val, _values)
     [val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 450)
  def _reduce_217(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 451)
  def _reduce_218(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 452)
  def _reduce_219(val, _values)
     val[0] << val[1] << val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 453)
  def _reduce_220(val, _values)
     val[0] << val[1] << val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 456)
  def _reduce_221(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 457)
  def _reduce_222(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 460)
  def _reduce_223(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 461)
  def _reduce_224(val, _values)
     val[0] << val[1] << val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 464)
  def _reduce_225(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 465)
  def _reduce_226(val, _values)
     val[0] << val[1] << val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 468)
  def _reduce_227(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 469)
  def _reduce_228(val, _values)
     val[0] << val[1] << val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 472)
  def _reduce_229(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 473)
  def _reduce_230(val, _values)
     val[0] << val[1] << val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 476)
  def _reduce_231(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 477)
  def _reduce_232(val, _values)
     val[0] << val[1] << val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 480)
  def _reduce_233(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 481)
  def _reduce_234(val, _values)
     val[0] << val[1] << val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 484)
  def _reduce_235(val, _values)
     StructType::Field.new(val[0], val[1], val[2], false) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 485)
  def _reduce_236(val, _values)
     StructType::Field.new([val[0]], nil, val[1], false)
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 486)
  def _reduce_237(val, _values)
     StructType::Field.new([Parens.new(val[1])], nil, val[3], false) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 487)
  def _reduce_238(val, _values)
     StructType::Field.new([val[1]], nil, val[2], true) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 488)
  def _reduce_239(val, _values)
     StructType::Field.new([Parens.new(PointerType.new(val[2]))], val[4], false) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 489)
  def _reduce_240(val, _values)
     StructType::Field.new([Parens.new(val[2])], val[4], true) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 492)
  def _reduce_241(val, _values)
     QualifiedIdent.new(nil, nil, val[0]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 493)
  def _reduce_242(val, _values)
     QualifiedIdent.new(val[0], val[1], val[2]) 
  end
.,.,

# reduce 243 omitted

module_eval(<<'.,.,', 'grammar.y', 499)
  def _reduce_244(val, _values)
     InterfaceType::Spec.new(val[0], val[1][0], val[1][1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 500)
  def _reduce_245(val, _values)
     InterfaceType::Spec.new(val[0], nil, nil) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 501)
  def _reduce_246(val, _values)
     InterfaceType::Spec.new(Parens.new(val[1]), nil, nil) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 504)
  def _reduce_247(val, _values)
     [Parens.new(val[1]), val[3]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 510)
  def _reduce_248(val, _values)
     Param.new(val[0], nil) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 511)
  def _reduce_249(val, _values)
     Param.new(val[0], val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 512)
  def _reduce_250(val, _values)
     Param.new(val[0], val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 513)
  def _reduce_251(val, _values)
     Param.new(val[0], nil) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 516)
  def _reduce_252(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 517)
  def _reduce_253(val, _values)
     val[0] << val[1] << val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 520)
  def _reduce_254(val, _values)
     [] 
  end
.,.,

# reduce 255 omitted

module_eval(<<'.,.,', 'grammar.y', 527)
  def _reduce_256(val, _values)
     Line.new 
  end
.,.,

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

module_eval(<<'.,.,', 'grammar.y', 549)
  def _reduce_273(val, _values)
     StmtLabeled.new(val[0], val[3]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 552)
  def _reduce_274(val, _values)
     StmtFall.new(@token) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 555)
  def _reduce_275(val, _values)
     StmtBreak.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 558)
  def _reduce_276(val, _values)
     StmtContinue.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 561)
  def _reduce_277(val, _values)
     StmtGo.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 562)
  def _reduce_278(val, _values)
     StmtGo.new(val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 565)
  def _reduce_279(val, _values)
     Call.new(val[2], nil, [], false) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 566)
  def _reduce_280(val, _values)
     Call.new(val[3], nil, val[1], false) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 567)
  def _reduce_281(val, _values)
     Call.new(val[4], nil, val[1], false) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 570)
  def _reduce_282(val, _values)
     StmtDefer.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 573)
  def _reduce_283(val, _values)
     StmtGoto.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 576)
  def _reduce_284(val, _values)
     StmtReturn.new(val[1]) 
  end
.,.,

# reduce 285 omitted

module_eval(<<'.,.,', 'grammar.y', 580)
  def _reduce_286(val, _values)
     StmtFall.new 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 581)
  def _reduce_287(val, _values)
     StmtBreak.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 582)
  def _reduce_288(val, _values)
     StmtContinue.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 583)
  def _reduce_289(val, _values)
     StmtGo.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 584)
  def _reduce_290(val, _values)
     StmtDefer.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 585)
  def _reduce_291(val, _values)
     StmtGoto.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 586)
  def _reduce_292(val, _values)
     StmtReturn.new(val[1]) 
  end
.,.,

# reduce 293 omitted

module_eval(<<'.,.,', 'grammar.y', 590)
  def _reduce_294(val, _values)
     Expr.new([val[0]], val[1], [val[2]]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 591)
  def _reduce_295(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 592)
  def _reduce_296(val, _values)
     Expr.new(val[0], val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 593)
  def _reduce_297(val, _values)
     Expr.new([val[0]], val[1], []) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 594)
  def _reduce_298(val, _values)
     Expr.new([val[0]], val[1], []) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 597)
  def _reduce_299(val, _values)
     [val[1]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 598)
  def _reduce_300(val, _values)
     val[1]   
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 601)
  def _reduce_301(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 602)
  def _reduce_302(val, _values)
     val[0] << val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 605)
  def _reduce_303(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 606)
  def _reduce_304(val, _values)
     val[0] << val[1] << val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 609)
  def _reduce_305(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 610)
  def _reduce_306(val, _values)
     val[0] << val[1] << val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 613)
  def _reduce_307(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 614)
  def _reduce_308(val, _values)
     val[0] << val[1] << val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 617)
  def _reduce_309(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 618)
  def _reduce_310(val, _values)
     val[0] << val[1] << val[2] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 621)
  def _reduce_311(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 622)
  def _reduce_312(val, _values)
     val[0] << val[1] << val[2] 
  end
.,.,

# reduce 313 omitted

# reduce 314 omitted

# reduce 315 omitted

# reduce 316 omitted

# reduce 317 omitted

# reduce 318 omitted

# reduce 319 omitted

# reduce 320 omitted

# reduce 321 omitted

# reduce 322 omitted

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser

end
